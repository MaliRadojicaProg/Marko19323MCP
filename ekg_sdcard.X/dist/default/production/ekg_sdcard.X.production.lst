

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sat Jan 25 10:17:06 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    33                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35   000000                     
    36                           ; Generated 25/07/2024 GMT
    37                           ; 
    38                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F2520 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70   000FE0                     bsr             equ	4064
    71   000FE9                     fsr0            equ	4073
    72   000FEA                     fsr0h           equ	4074
    73   000FE9                     fsr0l           equ	4073
    74   000FE1                     fsr1            equ	4065
    75   000FE2                     fsr1h           equ	4066
    76   000FE1                     fsr1l           equ	4065
    77   000FD9                     fsr2            equ	4057
    78   000FDA                     fsr2h           equ	4058
    79   000FD9                     fsr2l           equ	4057
    80   000FEF                     indf0           equ	4079
    81   000FE7                     indf1           equ	4071
    82   000FDF                     indf2           equ	4063
    83   000FF2                     intcon          equ	4082
    84   000000                     nvmcon          equ	0
    85   000FF9                     pcl             equ	4089
    86   000FFA                     pclath          equ	4090
    87   000FFB                     pclatu          equ	4091
    88   000FEB                     plusw0          equ	4075
    89   000FE3                     plusw1          equ	4067
    90   000FDB                     plusw2          equ	4059
    91   000FED                     postdec0        equ	4077
    92   000FE5                     postdec1        equ	4069
    93   000FDD                     postdec2        equ	4061
    94   000FEE                     postinc0        equ	4078
    95   000FE6                     postinc1        equ	4070
    96   000FDE                     postinc2        equ	4062
    97   000FEC                     preinc0         equ	4076
    98   000FE4                     preinc1         equ	4068
    99   000FDC                     preinc2         equ	4060
   100   000FF3                     prod            equ	4083
   101   000FF4                     prodh           equ	4084
   102   000FF3                     prodl           equ	4083
   103   000FD8                     status          equ	4056
   104   000FF5                     tablat          equ	4085
   105   000FF6                     tblptr          equ	4086
   106   000FF7                     tblptrh         equ	4087
   107   000FF6                     tblptrl         equ	4086
   108   000FF8                     tblptru         equ	4088
   109   000FFD                     tosl            equ	4093
   110   000FE8                     wreg            equ	4072
   111   000F80                     PORTA           equ	3968	;# 
   112   000F81                     PORTB           equ	3969	;# 
   113   000F82                     PORTC           equ	3970	;# 
   114   000F84                     PORTE           equ	3972	;# 
   115   000F89                     LATA            equ	3977	;# 
   116   000F8A                     LATB            equ	3978	;# 
   117   000F8B                     LATC            equ	3979	;# 
   118   000F92                     TRISA           equ	3986	;# 
   119   000F92                     DDRA            equ	3986	;# 
   120   000F93                     TRISB           equ	3987	;# 
   121   000F93                     DDRB            equ	3987	;# 
   122   000F94                     TRISC           equ	3988	;# 
   123   000F94                     DDRC            equ	3988	;# 
   124   000F9B                     OSCTUNE         equ	3995	;# 
   125   000F9D                     PIE1            equ	3997	;# 
   126   000F9E                     PIR1            equ	3998	;# 
   127   000F9F                     IPR1            equ	3999	;# 
   128   000FA0                     PIE2            equ	4000	;# 
   129   000FA1                     PIR2            equ	4001	;# 
   130   000FA2                     IPR2            equ	4002	;# 
   131   000FA6                     EECON1          equ	4006	;# 
   132   000FA7                     EECON2          equ	4007	;# 
   133   000FA8                     EEDATA          equ	4008	;# 
   134   000FA9                     EEADR           equ	4009	;# 
   135   000FAB                     RCSTA           equ	4011	;# 
   136   000FAB                     RCSTA1          equ	4011	;# 
   137   000FAC                     TXSTA           equ	4012	;# 
   138   000FAC                     TXSTA1          equ	4012	;# 
   139   000FAD                     TXREG           equ	4013	;# 
   140   000FAD                     TXREG1          equ	4013	;# 
   141   000FAE                     RCREG           equ	4014	;# 
   142   000FAE                     RCREG1          equ	4014	;# 
   143   000FAF                     SPBRG           equ	4015	;# 
   144   000FAF                     SPBRG1          equ	4015	;# 
   145   000FB0                     SPBRGH          equ	4016	;# 
   146   000FB1                     T3CON           equ	4017	;# 
   147   000FB2                     TMR3            equ	4018	;# 
   148   000FB2                     TMR3L           equ	4018	;# 
   149   000FB3                     TMR3H           equ	4019	;# 
   150   000FB4                     CMCON           equ	4020	;# 
   151   000FB5                     CVRCON          equ	4021	;# 
   152   000FB6                     ECCP1AS         equ	4022	;# 
   153   000FB6                     ECCPAS          equ	4022	;# 
   154   000FB7                     PWM1CON         equ	4023	;# 
   155   000FB7                     ECCP1DEL        equ	4023	;# 
   156   000FB8                     BAUDCON         equ	4024	;# 
   157   000FB8                     BAUDCTL         equ	4024	;# 
   158   000FBA                     CCP2CON         equ	4026	;# 
   159   000FBB                     CCPR2           equ	4027	;# 
   160   000FBB                     CCPR2L          equ	4027	;# 
   161   000FBC                     CCPR2H          equ	4028	;# 
   162   000FBD                     CCP1CON         equ	4029	;# 
   163   000FBE                     CCPR1           equ	4030	;# 
   164   000FBE                     CCPR1L          equ	4030	;# 
   165   000FBF                     CCPR1H          equ	4031	;# 
   166   000FC0                     ADCON2          equ	4032	;# 
   167   000FC1                     ADCON1          equ	4033	;# 
   168   000FC2                     ADCON0          equ	4034	;# 
   169   000FC3                     ADRES           equ	4035	;# 
   170   000FC3                     ADRESL          equ	4035	;# 
   171   000FC4                     ADRESH          equ	4036	;# 
   172   000FC5                     SSPCON2         equ	4037	;# 
   173   000FC6                     SSPCON1         equ	4038	;# 
   174   000FC7                     SSPSTAT         equ	4039	;# 
   175   000FC8                     SSPADD          equ	4040	;# 
   176   000FC9                     SSPBUF          equ	4041	;# 
   177   000FCA                     T2CON           equ	4042	;# 
   178   000FCB                     PR2             equ	4043	;# 
   179   000FCB                     MEMCON          equ	4043	;# 
   180   000FCC                     TMR2            equ	4044	;# 
   181   000FCD                     T1CON           equ	4045	;# 
   182   000FCE                     TMR1            equ	4046	;# 
   183   000FCE                     TMR1L           equ	4046	;# 
   184   000FCF                     TMR1H           equ	4047	;# 
   185   000FD0                     RCON            equ	4048	;# 
   186   000FD1                     WDTCON          equ	4049	;# 
   187   000FD2                     HLVDCON         equ	4050	;# 
   188   000FD2                     LVDCON          equ	4050	;# 
   189   000FD3                     OSCCON          equ	4051	;# 
   190   000FD5                     T0CON           equ	4053	;# 
   191   000FD6                     TMR0            equ	4054	;# 
   192   000FD6                     TMR0L           equ	4054	;# 
   193   000FD7                     TMR0H           equ	4055	;# 
   194   000FD8                     STATUS          equ	4056	;# 
   195   000FD9                     FSR2            equ	4057	;# 
   196   000FD9                     FSR2L           equ	4057	;# 
   197   000FDA                     FSR2H           equ	4058	;# 
   198   000FDB                     PLUSW2          equ	4059	;# 
   199   000FDC                     PREINC2         equ	4060	;# 
   200   000FDD                     POSTDEC2        equ	4061	;# 
   201   000FDE                     POSTINC2        equ	4062	;# 
   202   000FDF                     INDF2           equ	4063	;# 
   203   000FE0                     BSR             equ	4064	;# 
   204   000FE1                     FSR1            equ	4065	;# 
   205   000FE1                     FSR1L           equ	4065	;# 
   206   000FE2                     FSR1H           equ	4066	;# 
   207   000FE3                     PLUSW1          equ	4067	;# 
   208   000FE4                     PREINC1         equ	4068	;# 
   209   000FE5                     POSTDEC1        equ	4069	;# 
   210   000FE6                     POSTINC1        equ	4070	;# 
   211   000FE7                     INDF1           equ	4071	;# 
   212   000FE8                     WREG            equ	4072	;# 
   213   000FE9                     FSR0            equ	4073	;# 
   214   000FE9                     FSR0L           equ	4073	;# 
   215   000FEA                     FSR0H           equ	4074	;# 
   216   000FEB                     PLUSW0          equ	4075	;# 
   217   000FEC                     PREINC0         equ	4076	;# 
   218   000FED                     POSTDEC0        equ	4077	;# 
   219   000FEE                     POSTINC0        equ	4078	;# 
   220   000FEF                     INDF0           equ	4079	;# 
   221   000FF0                     INTCON3         equ	4080	;# 
   222   000FF1                     INTCON2         equ	4081	;# 
   223   000FF2                     INTCON          equ	4082	;# 
   224   000FF3                     PROD            equ	4083	;# 
   225   000FF3                     PRODL           equ	4083	;# 
   226   000FF4                     PRODH           equ	4084	;# 
   227   000FF5                     TABLAT          equ	4085	;# 
   228   000FF6                     TBLPTR          equ	4086	;# 
   229   000FF6                     TBLPTRL         equ	4086	;# 
   230   000FF7                     TBLPTRH         equ	4087	;# 
   231   000FF8                     TBLPTRU         equ	4088	;# 
   232   000FF9                     PCLAT           equ	4089	;# 
   233   000FF9                     PC              equ	4089	;# 
   234   000FF9                     PCL             equ	4089	;# 
   235   000FFA                     PCLATH          equ	4090	;# 
   236   000FFB                     PCLATU          equ	4091	;# 
   237   000FFC                     STKPTR          equ	4092	;# 
   238   000FFD                     TOS             equ	4093	;# 
   239   000FFD                     TOSL            equ	4093	;# 
   240   000FFE                     TOSH            equ	4094	;# 
   241   000FFF                     TOSU            equ	4095	;# 
   242   000F80                     PORTA           equ	3968	;# 
   243   000F81                     PORTB           equ	3969	;# 
   244   000F82                     PORTC           equ	3970	;# 
   245   000F84                     PORTE           equ	3972	;# 
   246   000F89                     LATA            equ	3977	;# 
   247   000F8A                     LATB            equ	3978	;# 
   248   000F8B                     LATC            equ	3979	;# 
   249   000F92                     TRISA           equ	3986	;# 
   250   000F92                     DDRA            equ	3986	;# 
   251   000F93                     TRISB           equ	3987	;# 
   252   000F93                     DDRB            equ	3987	;# 
   253   000F94                     TRISC           equ	3988	;# 
   254   000F94                     DDRC            equ	3988	;# 
   255   000F9B                     OSCTUNE         equ	3995	;# 
   256   000F9D                     PIE1            equ	3997	;# 
   257   000F9E                     PIR1            equ	3998	;# 
   258   000F9F                     IPR1            equ	3999	;# 
   259   000FA0                     PIE2            equ	4000	;# 
   260   000FA1                     PIR2            equ	4001	;# 
   261   000FA2                     IPR2            equ	4002	;# 
   262   000FA6                     EECON1          equ	4006	;# 
   263   000FA7                     EECON2          equ	4007	;# 
   264   000FA8                     EEDATA          equ	4008	;# 
   265   000FA9                     EEADR           equ	4009	;# 
   266   000FAB                     RCSTA           equ	4011	;# 
   267   000FAB                     RCSTA1          equ	4011	;# 
   268   000FAC                     TXSTA           equ	4012	;# 
   269   000FAC                     TXSTA1          equ	4012	;# 
   270   000FAD                     TXREG           equ	4013	;# 
   271   000FAD                     TXREG1          equ	4013	;# 
   272   000FAE                     RCREG           equ	4014	;# 
   273   000FAE                     RCREG1          equ	4014	;# 
   274   000FAF                     SPBRG           equ	4015	;# 
   275   000FAF                     SPBRG1          equ	4015	;# 
   276   000FB0                     SPBRGH          equ	4016	;# 
   277   000FB1                     T3CON           equ	4017	;# 
   278   000FB2                     TMR3            equ	4018	;# 
   279   000FB2                     TMR3L           equ	4018	;# 
   280   000FB3                     TMR3H           equ	4019	;# 
   281   000FB4                     CMCON           equ	4020	;# 
   282   000FB5                     CVRCON          equ	4021	;# 
   283   000FB6                     ECCP1AS         equ	4022	;# 
   284   000FB6                     ECCPAS          equ	4022	;# 
   285   000FB7                     PWM1CON         equ	4023	;# 
   286   000FB7                     ECCP1DEL        equ	4023	;# 
   287   000FB8                     BAUDCON         equ	4024	;# 
   288   000FB8                     BAUDCTL         equ	4024	;# 
   289   000FBA                     CCP2CON         equ	4026	;# 
   290   000FBB                     CCPR2           equ	4027	;# 
   291   000FBB                     CCPR2L          equ	4027	;# 
   292   000FBC                     CCPR2H          equ	4028	;# 
   293   000FBD                     CCP1CON         equ	4029	;# 
   294   000FBE                     CCPR1           equ	4030	;# 
   295   000FBE                     CCPR1L          equ	4030	;# 
   296   000FBF                     CCPR1H          equ	4031	;# 
   297   000FC0                     ADCON2          equ	4032	;# 
   298   000FC1                     ADCON1          equ	4033	;# 
   299   000FC2                     ADCON0          equ	4034	;# 
   300   000FC3                     ADRES           equ	4035	;# 
   301   000FC3                     ADRESL          equ	4035	;# 
   302   000FC4                     ADRESH          equ	4036	;# 
   303   000FC5                     SSPCON2         equ	4037	;# 
   304   000FC6                     SSPCON1         equ	4038	;# 
   305   000FC7                     SSPSTAT         equ	4039	;# 
   306   000FC8                     SSPADD          equ	4040	;# 
   307   000FC9                     SSPBUF          equ	4041	;# 
   308   000FCA                     T2CON           equ	4042	;# 
   309   000FCB                     PR2             equ	4043	;# 
   310   000FCB                     MEMCON          equ	4043	;# 
   311   000FCC                     TMR2            equ	4044	;# 
   312   000FCD                     T1CON           equ	4045	;# 
   313   000FCE                     TMR1            equ	4046	;# 
   314   000FCE                     TMR1L           equ	4046	;# 
   315   000FCF                     TMR1H           equ	4047	;# 
   316   000FD0                     RCON            equ	4048	;# 
   317   000FD1                     WDTCON          equ	4049	;# 
   318   000FD2                     HLVDCON         equ	4050	;# 
   319   000FD2                     LVDCON          equ	4050	;# 
   320   000FD3                     OSCCON          equ	4051	;# 
   321   000FD5                     T0CON           equ	4053	;# 
   322   000FD6                     TMR0            equ	4054	;# 
   323   000FD6                     TMR0L           equ	4054	;# 
   324   000FD7                     TMR0H           equ	4055	;# 
   325   000FD8                     STATUS          equ	4056	;# 
   326   000FD9                     FSR2            equ	4057	;# 
   327   000FD9                     FSR2L           equ	4057	;# 
   328   000FDA                     FSR2H           equ	4058	;# 
   329   000FDB                     PLUSW2          equ	4059	;# 
   330   000FDC                     PREINC2         equ	4060	;# 
   331   000FDD                     POSTDEC2        equ	4061	;# 
   332   000FDE                     POSTINC2        equ	4062	;# 
   333   000FDF                     INDF2           equ	4063	;# 
   334   000FE0                     BSR             equ	4064	;# 
   335   000FE1                     FSR1            equ	4065	;# 
   336   000FE1                     FSR1L           equ	4065	;# 
   337   000FE2                     FSR1H           equ	4066	;# 
   338   000FE3                     PLUSW1          equ	4067	;# 
   339   000FE4                     PREINC1         equ	4068	;# 
   340   000FE5                     POSTDEC1        equ	4069	;# 
   341   000FE6                     POSTINC1        equ	4070	;# 
   342   000FE7                     INDF1           equ	4071	;# 
   343   000FE8                     WREG            equ	4072	;# 
   344   000FE9                     FSR0            equ	4073	;# 
   345   000FE9                     FSR0L           equ	4073	;# 
   346   000FEA                     FSR0H           equ	4074	;# 
   347   000FEB                     PLUSW0          equ	4075	;# 
   348   000FEC                     PREINC0         equ	4076	;# 
   349   000FED                     POSTDEC0        equ	4077	;# 
   350   000FEE                     POSTINC0        equ	4078	;# 
   351   000FEF                     INDF0           equ	4079	;# 
   352   000FF0                     INTCON3         equ	4080	;# 
   353   000FF1                     INTCON2         equ	4081	;# 
   354   000FF2                     INTCON          equ	4082	;# 
   355   000FF3                     PROD            equ	4083	;# 
   356   000FF3                     PRODL           equ	4083	;# 
   357   000FF4                     PRODH           equ	4084	;# 
   358   000FF5                     TABLAT          equ	4085	;# 
   359   000FF6                     TBLPTR          equ	4086	;# 
   360   000FF6                     TBLPTRL         equ	4086	;# 
   361   000FF7                     TBLPTRH         equ	4087	;# 
   362   000FF8                     TBLPTRU         equ	4088	;# 
   363   000FF9                     PCLAT           equ	4089	;# 
   364   000FF9                     PC              equ	4089	;# 
   365   000FF9                     PCL             equ	4089	;# 
   366   000FFA                     PCLATH          equ	4090	;# 
   367   000FFB                     PCLATU          equ	4091	;# 
   368   000FFC                     STKPTR          equ	4092	;# 
   369   000FFD                     TOS             equ	4093	;# 
   370   000FFD                     TOSL            equ	4093	;# 
   371   000FFE                     TOSH            equ	4094	;# 
   372   000FFF                     TOSU            equ	4095	;# 
   373   000F80                     PORTA           equ	3968	;# 
   374   000F81                     PORTB           equ	3969	;# 
   375   000F82                     PORTC           equ	3970	;# 
   376   000F84                     PORTE           equ	3972	;# 
   377   000F89                     LATA            equ	3977	;# 
   378   000F8A                     LATB            equ	3978	;# 
   379   000F8B                     LATC            equ	3979	;# 
   380   000F92                     TRISA           equ	3986	;# 
   381   000F92                     DDRA            equ	3986	;# 
   382   000F93                     TRISB           equ	3987	;# 
   383   000F93                     DDRB            equ	3987	;# 
   384   000F94                     TRISC           equ	3988	;# 
   385   000F94                     DDRC            equ	3988	;# 
   386   000F9B                     OSCTUNE         equ	3995	;# 
   387   000F9D                     PIE1            equ	3997	;# 
   388   000F9E                     PIR1            equ	3998	;# 
   389   000F9F                     IPR1            equ	3999	;# 
   390   000FA0                     PIE2            equ	4000	;# 
   391   000FA1                     PIR2            equ	4001	;# 
   392   000FA2                     IPR2            equ	4002	;# 
   393   000FA6                     EECON1          equ	4006	;# 
   394   000FA7                     EECON2          equ	4007	;# 
   395   000FA8                     EEDATA          equ	4008	;# 
   396   000FA9                     EEADR           equ	4009	;# 
   397   000FAB                     RCSTA           equ	4011	;# 
   398   000FAB                     RCSTA1          equ	4011	;# 
   399   000FAC                     TXSTA           equ	4012	;# 
   400   000FAC                     TXSTA1          equ	4012	;# 
   401   000FAD                     TXREG           equ	4013	;# 
   402   000FAD                     TXREG1          equ	4013	;# 
   403   000FAE                     RCREG           equ	4014	;# 
   404   000FAE                     RCREG1          equ	4014	;# 
   405   000FAF                     SPBRG           equ	4015	;# 
   406   000FAF                     SPBRG1          equ	4015	;# 
   407   000FB0                     SPBRGH          equ	4016	;# 
   408   000FB1                     T3CON           equ	4017	;# 
   409   000FB2                     TMR3            equ	4018	;# 
   410   000FB2                     TMR3L           equ	4018	;# 
   411   000FB3                     TMR3H           equ	4019	;# 
   412   000FB4                     CMCON           equ	4020	;# 
   413   000FB5                     CVRCON          equ	4021	;# 
   414   000FB6                     ECCP1AS         equ	4022	;# 
   415   000FB6                     ECCPAS          equ	4022	;# 
   416   000FB7                     PWM1CON         equ	4023	;# 
   417   000FB7                     ECCP1DEL        equ	4023	;# 
   418   000FB8                     BAUDCON         equ	4024	;# 
   419   000FB8                     BAUDCTL         equ	4024	;# 
   420   000FBA                     CCP2CON         equ	4026	;# 
   421   000FBB                     CCPR2           equ	4027	;# 
   422   000FBB                     CCPR2L          equ	4027	;# 
   423   000FBC                     CCPR2H          equ	4028	;# 
   424   000FBD                     CCP1CON         equ	4029	;# 
   425   000FBE                     CCPR1           equ	4030	;# 
   426   000FBE                     CCPR1L          equ	4030	;# 
   427   000FBF                     CCPR1H          equ	4031	;# 
   428   000FC0                     ADCON2          equ	4032	;# 
   429   000FC1                     ADCON1          equ	4033	;# 
   430   000FC2                     ADCON0          equ	4034	;# 
   431   000FC3                     ADRES           equ	4035	;# 
   432   000FC3                     ADRESL          equ	4035	;# 
   433   000FC4                     ADRESH          equ	4036	;# 
   434   000FC5                     SSPCON2         equ	4037	;# 
   435   000FC6                     SSPCON1         equ	4038	;# 
   436   000FC7                     SSPSTAT         equ	4039	;# 
   437   000FC8                     SSPADD          equ	4040	;# 
   438   000FC9                     SSPBUF          equ	4041	;# 
   439   000FCA                     T2CON           equ	4042	;# 
   440   000FCB                     PR2             equ	4043	;# 
   441   000FCB                     MEMCON          equ	4043	;# 
   442   000FCC                     TMR2            equ	4044	;# 
   443   000FCD                     T1CON           equ	4045	;# 
   444   000FCE                     TMR1            equ	4046	;# 
   445   000FCE                     TMR1L           equ	4046	;# 
   446   000FCF                     TMR1H           equ	4047	;# 
   447   000FD0                     RCON            equ	4048	;# 
   448   000FD1                     WDTCON          equ	4049	;# 
   449   000FD2                     HLVDCON         equ	4050	;# 
   450   000FD2                     LVDCON          equ	4050	;# 
   451   000FD3                     OSCCON          equ	4051	;# 
   452   000FD5                     T0CON           equ	4053	;# 
   453   000FD6                     TMR0            equ	4054	;# 
   454   000FD6                     TMR0L           equ	4054	;# 
   455   000FD7                     TMR0H           equ	4055	;# 
   456   000FD8                     STATUS          equ	4056	;# 
   457   000FD9                     FSR2            equ	4057	;# 
   458   000FD9                     FSR2L           equ	4057	;# 
   459   000FDA                     FSR2H           equ	4058	;# 
   460   000FDB                     PLUSW2          equ	4059	;# 
   461   000FDC                     PREINC2         equ	4060	;# 
   462   000FDD                     POSTDEC2        equ	4061	;# 
   463   000FDE                     POSTINC2        equ	4062	;# 
   464   000FDF                     INDF2           equ	4063	;# 
   465   000FE0                     BSR             equ	4064	;# 
   466   000FE1                     FSR1            equ	4065	;# 
   467   000FE1                     FSR1L           equ	4065	;# 
   468   000FE2                     FSR1H           equ	4066	;# 
   469   000FE3                     PLUSW1          equ	4067	;# 
   470   000FE4                     PREINC1         equ	4068	;# 
   471   000FE5                     POSTDEC1        equ	4069	;# 
   472   000FE6                     POSTINC1        equ	4070	;# 
   473   000FE7                     INDF1           equ	4071	;# 
   474   000FE8                     WREG            equ	4072	;# 
   475   000FE9                     FSR0            equ	4073	;# 
   476   000FE9                     FSR0L           equ	4073	;# 
   477   000FEA                     FSR0H           equ	4074	;# 
   478   000FEB                     PLUSW0          equ	4075	;# 
   479   000FEC                     PREINC0         equ	4076	;# 
   480   000FED                     POSTDEC0        equ	4077	;# 
   481   000FEE                     POSTINC0        equ	4078	;# 
   482   000FEF                     INDF0           equ	4079	;# 
   483   000FF0                     INTCON3         equ	4080	;# 
   484   000FF1                     INTCON2         equ	4081	;# 
   485   000FF2                     INTCON          equ	4082	;# 
   486   000FF3                     PROD            equ	4083	;# 
   487   000FF3                     PRODL           equ	4083	;# 
   488   000FF4                     PRODH           equ	4084	;# 
   489   000FF5                     TABLAT          equ	4085	;# 
   490   000FF6                     TBLPTR          equ	4086	;# 
   491   000FF6                     TBLPTRL         equ	4086	;# 
   492   000FF7                     TBLPTRH         equ	4087	;# 
   493   000FF8                     TBLPTRU         equ	4088	;# 
   494   000FF9                     PCLAT           equ	4089	;# 
   495   000FF9                     PC              equ	4089	;# 
   496   000FF9                     PCL             equ	4089	;# 
   497   000FFA                     PCLATH          equ	4090	;# 
   498   000FFB                     PCLATU          equ	4091	;# 
   499   000FFC                     STKPTR          equ	4092	;# 
   500   000FFD                     TOS             equ	4093	;# 
   501   000FFD                     TOSL            equ	4093	;# 
   502   000FFE                     TOSH            equ	4094	;# 
   503   000FFF                     TOSU            equ	4095	;# 
   504   000FC9                     _SSPBUF         set	4041
   505   000FC7                     _SSPSTATbits    set	4039
   506   000FC6                     _SSPCON1        set	4038
   507   000FC7                     _SSPSTAT        set	4039
   508   000FC2                     _ADCON0bits     set	4034
   509   000FF2                     _INTCONbits     set	4082
   510   000FC3                     _ADRESL         set	4035
   511   000FC4                     _ADRESH         set	4036
   512   000F9E                     _PIR1bits       set	3998
   513   000F9D                     _PIE1bits       set	3997
   514   000FAD                     _TXREG          set	4013
   515   000F81                     _PORTBbits      set	3969
   516   000F9D                     _PIE1           set	3997
   517   000FF1                     _INTCON2        set	4081
   518   000FF2                     _INTCON         set	4082
   519   000FD6                     _TMR0L          set	4054
   520   000FD7                     _TMR0H          set	4055
   521   000FD5                     _T0CON          set	4053
   522   000FC2                     _ADCON0         set	4034
   523   000FC0                     _ADCON2         set	4032
   524   000FC1                     _ADCON1         set	4033
   525   000F82                     _PORTC          set	3970
   526   000F94                     _TRISC          set	3988
   527   000F81                     _PORTB          set	3969
   528   000F93                     _TRISB          set	3987
   529   000F80                     _PORTA          set	3968
   530   000F92                     _TRISA          set	3986
   531   000FAB                     _RCSTA          set	4011
   532   000FB8                     _BAUDCONbits    set	4024
   533   000FAC                     _TXSTAbits      set	4012
   534   000FB0                     _SPBRGH         set	4016
   535   000FAF                     _SPBRG          set	4015
   536   000F94                     _TRISCbits      set	3988
   537                           
   538                           ; #config settings
   539                           
   540                           	psect	cinit
   541   0011A0                     __pcinit:
   542                           	callstack 0
   543   0011A0                     start_initialization:
   544                           	callstack 0
   545   0011A0                     __initialization:
   546                           	callstack 0
   547                           
   548                           ; Clear objects allocated to BIGRAM (1024 bytes)
   549   0011A0  EE00  F088         	lfsr	0,__pbssBIGRAM
   550   0011A4  EE14 F000          	lfsr	1,1024
   551   0011A8                     clear_0:
   552   0011A8  6AEE               	clrf	postinc0,c
   553   0011AA  50E5               	movf	postdec1,w,c
   554   0011AC  50E1               	movf	fsr1l,w,c
   555   0011AE  E1FC               	bnz	clear_0
   556   0011B0  50E2               	movf	fsr1h,w,c
   557   0011B2  E1FA               	bnz	clear_0
   558                           
   559                           ; Clear objects allocated to COMRAM (58 bytes)
   560   0011B4  EE00  F001         	lfsr	0,__pbssCOMRAM
   561   0011B8  0E3A               	movlw	58
   562   0011BA                     clear_1:
   563   0011BA  6AEE               	clrf	postinc0,c
   564   0011BC  06E8               	decf	wreg,f,c
   565   0011BE  E1FD               	bnz	clear_1
   566   0011C0                     end_of_initialization:
   567                           	callstack 0
   568   0011C0                     __end_of__initialization:
   569                           	callstack 0
   570   0011C0  906A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   571   0011C2  926A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   572   0011C4  0100               	movlb	0
   573   0011C6  EF01  F003         	goto	_main	;jump to C main() function
   574                           
   575                           	psect	bssCOMRAM
   576   000001                     __pbssCOMRAM:
   577                           	callstack 0
   578   000001                     _data_pack:
   579                           	callstack 0
   580   000001                     	ds	14
   581   00000F                     _ADC_sample2:
   582                           	callstack 0
   583   00000F                     	ds	6
   584   000015                     _ADC_sample:
   585                           	callstack 0
   586   000015                     	ds	6
   587   00001B                     _totalBlocks:
   588                           	callstack 0
   589   00001B                     	ds	4
   590   00001F                     _startBlock:
   591                           	callstack 0
   592   00001F                     	ds	4
   593   000023                     _ByteX:
   594                           	callstack 0
   595   000023                     	ds	4
   596   000027                     _Result:
   597                           	callstack 0
   598   000027                     	ds	2
   599   000029                     _Buffer_sel:
   600                           	callstack 0
   601   000029                     	ds	2
   602   00002B                     _Buffer_count2:
   603                           	callstack 0
   604   00002B                     	ds	2
   605   00002D                     _Buffer_count:
   606                           	callstack 0
   607   00002D                     	ds	2
   608   00002F                     _Buffer:
   609                           	callstack 0
   610   00002F                     	ds	2
   611   000031                     _ADC_count:
   612                           	callstack 0
   613   000031                     	ds	2
   614   000033                     _cardType:
   615                           	callstack 0
   616   000033                     	ds	1
   617   000034                     _SDHC_flag:
   618                           	callstack 0
   619   000034                     	ds	1
   620   000035                     _FlagTransmit:
   621                           	callstack 0
   622   000035                     	ds	1
   623   000036                     _FlagUSD:
   624                           	callstack 0
   625   000036                     	ds	1
   626   000037                     _cntTas:
   627                           	callstack 0
   628   000037                     	ds	1
   629   000038                     _write_event:
   630                           	callstack 0
   631   000038                     	ds	1
   632   000039                     _read_event:
   633                           	callstack 0
   634   000039                     	ds	1
   635   00003A                     _mode_event:
   636                           	callstack 0
   637   00003A                     	ds	1
   638                           
   639                           	psect	bssBIGRAM
   640   000088                     __pbssBIGRAM:
   641                           	callstack 0
   642   000088                     _Buffer2:
   643                           	callstack 0
   644   000088                     	ds	512
   645   000288                     _Buffer1:
   646                           	callstack 0
   647   000288                     	ds	512
   648                           
   649                           	psect	cstackBANK0
   650   000080                     __pcstackBANK0:
   651                           	callstack 0
   652   000080                     main@address:
   653                           	callstack 0
   654                           
   655                           ; 4 bytes @ 0x0
   656   000080                     	ds	4
   657   000084                     main@startBlock:
   658                           	callstack 0
   659                           
   660                           ; 4 bytes @ 0x4
   661   000084                     	ds	4
   662                           
   663                           	psect	cstackCOMRAM
   664   00003B                     __pcstackCOMRAM:
   665                           	callstack 0
   666   00003B                     ??_pack_samples:
   667                           
   668                           ; 1 bytes @ 0x0
   669   00003B                     	ds	3
   670   00003E                     writeBuffer@Result:
   671                           	callstack 0
   672                           
   673                           ; 2 bytes @ 0x3
   674   00003E                     	ds	2
   675   000040                     ??_writeBuffer:
   676                           
   677                           ; 1 bytes @ 0x5
   678   000040                     	ds	4
   679   000044                     ??_ISR:
   680                           
   681                           ; 1 bytes @ 0x9
   682   000044                     	ds	9
   683   00004D                     SPI1_Init@sDataSample:
   684                           	callstack 0
   685   00004D                     SPI1_Read@d:
   686                           	callstack 0
   687   00004D                     SPI1_Write@dat:
   688                           	callstack 0
   689   00004D                     pack@Sample:
   690                           	callstack 0
   691   00004D                     transmit@i:
   692                           	callstack 0
   693   00004D                     ??_unpack_samples:
   694   00004D                     
   695                           ; 1 bytes @ 0x12
   696   00004D                     	ds	1
   697   00004E                     SPI1_Init@sClockIdle:
   698                           	callstack 0
   699   00004E                     SD_sendCommand@arg:
   700                           	callstack 0
   701                           
   702                           ; 4 bytes @ 0x13
   703   00004E                     	ds	1
   704   00004F                     SPI1_Init@sTransmitEdge:
   705                           	callstack 0
   706   00004F                     ??_pack:
   707                           
   708                           ; 1 bytes @ 0x14
   709   00004F                     	ds	1
   710   000050                     SPI1_Init@sType:
   711                           	callstack 0
   712   000050                     
   713                           ; 1 bytes @ 0x15
   714   000050                     	ds	1
   715   000051                     pack@i:
   716                           	callstack 0
   717                           
   718                           ; 2 bytes @ 0x16
   719   000051                     	ds	1
   720   000052                     ??_SD_sendCommand:
   721                           
   722                           ; 1 bytes @ 0x17
   723   000052                     	ds	4
   724   000056                     SD_sendCommand@retry:
   725                           	callstack 0
   726                           
   727                           ; 1 bytes @ 0x1B
   728   000056                     	ds	1
   729   000057                     SD_sendCommand@status1:
   730                           	callstack 0
   731                           
   732                           ; 1 bytes @ 0x1C
   733   000057                     	ds	1
   734   000058                     SD_sendCommand@response:
   735                           	callstack 0
   736                           
   737                           ; 1 bytes @ 0x1D
   738   000058                     	ds	1
   739   000059                     SD_sendCommand@cmd:
   740                           	callstack 0
   741                           
   742                           ; 1 bytes @ 0x1E
   743   000059                     	ds	1
   744   00005A                     SD_init@SD_version:
   745                           	callstack 0
   746   00005A                     SD_readSingleBlock@startBlock:
   747                           	callstack 0
   748   00005A                     SD_writeSingleBlock@startBlock:
   749                           	callstack 0
   750   00005A                     
   751                           ; 1 bytes @ 0x1F
   752   00005A                     	ds	1
   753   00005B                     SD_init@i:
   754                           	callstack 0
   755                           
   756                           ; 1 bytes @ 0x20
   757   00005B                     	ds	1
   758   00005C                     SD_init@response:
   759                           	callstack 0
   760                           
   761                           ; 1 bytes @ 0x21
   762   00005C                     	ds	1
   763   00005D                     SD_init@retry:
   764                           	callstack 0
   765                           
   766                           ; 2 bytes @ 0x22
   767   00005D                     	ds	1
   768   00005E                     SD_readSingleBlock@Buffer1:
   769                           	callstack 0
   770   00005E                     SD_writeSingleBlock@Buffer1:
   771                           	callstack 0
   772                           
   773                           ; 2 bytes @ 0x23
   774   00005E                     	ds	1
   775   00005F                     ?_init_SDMMC:
   776                           	callstack 0
   777                           
   778                           ; 2 bytes @ 0x24
   779   00005F                     	ds	1
   780   000060                     SD_readSingleBlock@retry:
   781                           	callstack 0
   782   000060                     SD_writeSingleBlock@retry:
   783                           	callstack 0
   784   000060                     
   785                           ; 1 bytes @ 0x25
   786   000060                     	ds	1
   787   000061                     ??_init_SDMMC:
   788                           
   789                           ; 1 bytes @ 0x26
   790   000061                     	ds	1
   791   000062                     SD_readSingleBlock@response:
   792                           	callstack 0
   793   000062                     SD_writeSingleBlock@response:
   794                           	callstack 0
   795   000062                     init_SDMMC@ret:
   796                           	callstack 0
   797                           
   798                           ; 2 bytes @ 0x27
   799   000062                     	ds	1
   800   000063                     SD_readSingleBlock@i:
   801                           	callstack 0
   802   000063                     SD_writeSingleBlock@i:
   803                           	callstack 0
   804                           
   805                           ; 2 bytes @ 0x28
   806   000063                     	ds	1
   807   000064                     init@ret:
   808                           	callstack 0
   809   000064                     
   810                           ; 1 bytes @ 0x29
   811   000064                     	ds	2
   812   000066                     ??_main:
   813                           
   814                           ; 1 bytes @ 0x2B
   815   000066                     	ds	4
   816                           
   817 ;;
   818 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   819 ;;
   820 ;; *************** function _main *****************
   821 ;; Defined at:
   822 ;;		line 338 in file "main.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;  startBlock      4    4[BANK0 ] unsigned long 
   827 ;;  address         4    0[BANK0 ] unsigned long 
   828 ;; Return value:  Size  Location     Type
   829 ;;                  2  169[None  ] int 
   830 ;; Registers used:
   831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   837 ;;      Params:         0       0       0       0       0       0       0
   838 ;;      Locals:         0       8       0       0       0       0       0
   839 ;;      Temps:          4       0       0       0       0       0       0
   840 ;;      Totals:         4       8       0       0       0       0       0
   841 ;;Total ram usage:       12 bytes
   842 ;; Hardware stack levels required when called: 9
   843 ;; This function calls:
   844 ;;		_SD_readSingleBlock
   845 ;;		_SD_writeSingleBlock
   846 ;;		_init
   847 ;;		_init_variables
   848 ;;		_pack
   849 ;;		_transmit
   850 ;;		_unpack_samples
   851 ;; This function is called by:
   852 ;;		Startup code after reset
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           	psect	text0
   857   000602                     __ptext0:
   858                           	callstack 0
   859   000602                     _main:
   860                           	callstack 22
   861   000602                     
   862                           ;main.c: 339:     unsigned long startBlock = 510;
   863   000602  0EFE               	movlw	254
   864   000604  0100               	movlb	0	; () banked
   865   000606  6F84               	movwf	main@startBlock& (0+255),b
   866   000608  0E01               	movlw	1
   867   00060A  6F85               	movwf	(main@startBlock+1)& (0+255),b
   868   00060C  0E00               	movlw	0
   869   00060E  6F86               	movwf	(main@startBlock+2)& (0+255),b
   870   000610  0E00               	movlw	0
   871   000612  6F87               	movwf	(main@startBlock+3)& (0+255),b
   872   000614                     
   873                           ; BSR set to: 0
   874                           ;main.c: 342:     init();
   875   000614  EC44  F008         	call	_init	;wreg free
   876   000618                     
   877                           ;main.c: 343:     init_variables();
   878   000618  ECB7  F008         	call	_init_variables	;wreg free
   879   00061C                     l170:
   880                           
   881                           ;main.c: 346:         if (FlagUSD == 1) {
   882   00061C  0436               	decf	_FlagUSD^0,w,c
   883   00061E  A4D8               	btfss	status,2,c
   884   000620  EF14  F003         	goto	u2381
   885   000624  EF16  F003         	goto	u2380
   886   000628                     u2381:
   887   000628  EF48  F003         	goto	l2705
   888   00062C                     u2380:
   889   00062C                     
   890                           ;main.c: 347:             FlagUSD = 0;
   891   00062C  6A36               	clrf	_FlagUSD^0,c
   892   00062E                     
   893                           ;main.c: 348:             if (Buffer_sel == 1)
   894   00062E  0429               	decf	_Buffer_sel^0,w,c
   895   000630  102A               	iorwf	(_Buffer_sel+1)^0,w,c
   896   000632  A4D8               	btfss	status,2,c
   897   000634  EF1E  F003         	goto	u2391
   898   000638  EF20  F003         	goto	u2390
   899   00063C                     u2391:
   900   00063C  EF35  F003         	goto	l2703
   901   000640                     u2390:
   902   000640                     
   903                           ;main.c: 349:                 SD_writeSingleBlock(startBlock + Buffer_count2, Buffer1);
   904   000640  502B               	movf	_Buffer_count2^0,w,c
   905   000642  0100               	movlb	0	; () banked
   906   000644  2584               	addwf	main@startBlock& (0+255),w,b
   907   000646  6E5A               	movwf	SD_writeSingleBlock@startBlock^0,c
   908   000648  502C               	movf	(_Buffer_count2+1)^0,w,c
   909   00064A  2185               	addwfc	(main@startBlock+1)& (0+255),w,b
   910   00064C  6E5B               	movwf	(SD_writeSingleBlock@startBlock+1)^0,c
   911   00064E  0E00               	movlw	0
   912   000650  2186               	addwfc	(main@startBlock+2)& (0+255),w,b
   913   000652  6E5C               	movwf	(SD_writeSingleBlock@startBlock+2)^0,c
   914   000654  0E00               	movlw	0
   915   000656  2187               	addwfc	(main@startBlock+3)& (0+255),w,b
   916   000658  6E5D               	movwf	(SD_writeSingleBlock@startBlock+3)^0,c
   917   00065A  0E88               	movlw	low _Buffer1
   918   00065C  6E5E               	movwf	SD_writeSingleBlock@Buffer1^0,c
   919   00065E  0E02               	movlw	high _Buffer1
   920   000660  6E5F               	movwf	(SD_writeSingleBlock@Buffer1+1)^0,c
   921   000662  ECAB  F006         	call	_SD_writeSingleBlock	;wreg free
   922   000666  EF48  F003         	goto	l2705
   923   00066A                     l2703:
   924                           
   925                           ;main.c: 351:                 SD_writeSingleBlock(startBlock + Buffer_count2, Buffer2);
   926   00066A  502B               	movf	_Buffer_count2^0,w,c
   927   00066C  0100               	movlb	0	; () banked
   928   00066E  2584               	addwf	main@startBlock& (0+255),w,b
   929   000670  6E5A               	movwf	SD_writeSingleBlock@startBlock^0,c
   930   000672  502C               	movf	(_Buffer_count2+1)^0,w,c
   931   000674  2185               	addwfc	(main@startBlock+1)& (0+255),w,b
   932   000676  6E5B               	movwf	(SD_writeSingleBlock@startBlock+1)^0,c
   933   000678  0E00               	movlw	0
   934   00067A  2186               	addwfc	(main@startBlock+2)& (0+255),w,b
   935   00067C  6E5C               	movwf	(SD_writeSingleBlock@startBlock+2)^0,c
   936   00067E  0E00               	movlw	0
   937   000680  2187               	addwfc	(main@startBlock+3)& (0+255),w,b
   938   000682  6E5D               	movwf	(SD_writeSingleBlock@startBlock+3)^0,c
   939   000684  0E88               	movlw	low _Buffer2
   940   000686  6E5E               	movwf	SD_writeSingleBlock@Buffer1^0,c
   941   000688  0E00               	movlw	high _Buffer2
   942   00068A  6E5F               	movwf	(SD_writeSingleBlock@Buffer1+1)^0,c
   943   00068C  ECAB  F006         	call	_SD_writeSingleBlock	;wreg free
   944   000690                     l2705:
   945                           
   946                           ;main.c: 354:         if (FlagTransmit == 1)
   947   000690  0435               	decf	_FlagTransmit^0,w,c
   948   000692  A4D8               	btfss	status,2,c
   949   000694  EF4E  F003         	goto	u2401
   950   000698  EF50  F003         	goto	u2400
   951   00069C                     u2401:
   952   00069C  EF59  F003         	goto	l2711
   953   0006A0                     u2400:
   954   0006A0                     
   955                           ;main.c: 355:         {;main.c: 356:             FlagTransmit = 0;
   956   0006A0  6A35               	clrf	_FlagTransmit^0,c
   957   0006A2                     
   958                           ;main.c: 357:             pack(Result);
   959   0006A2  C027  F04D         	movff	_Result,pack@Sample
   960   0006A6  C028  F04E         	movff	_Result+1,pack@Sample+1
   961   0006AA  EC13  F008         	call	_pack	;wreg free
   962                           
   963                           ;main.c: 358:             transmit();
   964   0006AE  EC74  F008         	call	_transmit	;wreg free
   965   0006B2                     l2711:
   966                           
   967                           ;main.c: 361:         if (read_event == 1) {
   968   0006B2  0439               	decf	_read_event^0,w,c
   969   0006B4  A4D8               	btfss	status,2,c
   970   0006B6  EF5F  F003         	goto	u2411
   971   0006BA  EF61  F003         	goto	u2410
   972   0006BE                     u2411:
   973   0006BE  EF0E  F003         	goto	l170
   974   0006C2                     u2410:
   975   0006C2                     
   976                           ;main.c: 362:             Buffer_count = 0;
   977   0006C2  0E00               	movlw	0
   978   0006C4  6E2E               	movwf	(_Buffer_count+1)^0,c
   979   0006C6  0E00               	movlw	0
   980   0006C8  6E2D               	movwf	_Buffer_count^0,c
   981   0006CA                     
   982                           ;main.c: 363:             for (address = startBlock + 1; address < startBlock + 10; addr
      +                          ess++) {
   983   0006CA  0E01               	movlw	1
   984   0006CC  0100               	movlb	0	; () banked
   985   0006CE  2584               	addwf	main@startBlock& (0+255),w,b
   986   0006D0  6F80               	movwf	main@address& (0+255),b
   987   0006D2  0E00               	movlw	0
   988   0006D4  2185               	addwfc	(main@startBlock+1)& (0+255),w,b
   989   0006D6  6F81               	movwf	(main@address+1)& (0+255),b
   990   0006D8  0E00               	movlw	0
   991   0006DA  2186               	addwfc	(main@startBlock+2)& (0+255),w,b
   992   0006DC  6F82               	movwf	(main@address+2)& (0+255),b
   993   0006DE  0E00               	movlw	0
   994   0006E0  2187               	addwfc	(main@startBlock+3)& (0+255),w,b
   995   0006E2  6F83               	movwf	(main@address+3)& (0+255),b
   996   0006E4  EF24  F004         	goto	l176
   997   0006E8                     l2717:
   998                           
   999                           ; BSR set to: 0
  1000                           ;main.c: 364:                 SD_readSingleBlock(address, Buffer1);
  1001   0006E8  C080  F05A         	movff	main@address,SD_readSingleBlock@startBlock
  1002   0006EC  C081  F05B         	movff	main@address+1,SD_readSingleBlock@startBlock+1
  1003   0006F0  C082  F05C         	movff	main@address+2,SD_readSingleBlock@startBlock+2
  1004   0006F4  C083  F05D         	movff	main@address+3,SD_readSingleBlock@startBlock+3
  1005   0006F8  0E88               	movlw	low _Buffer1
  1006   0006FA  6E5E               	movwf	SD_readSingleBlock@Buffer1^0,c
  1007   0006FC  0E02               	movlw	high _Buffer1
  1008   0006FE  6E5F               	movwf	(SD_readSingleBlock@Buffer1+1)^0,c
  1009   000700  EC32  F007         	call	_SD_readSingleBlock	;wreg free
  1010   000704                     
  1011                           ;main.c: 365:                 for (Buffer_count = 0; Buffer_count < 128; Buffer_count++)
      +                           {
  1012   000704  0E00               	movlw	0
  1013   000706  6E2E               	movwf	(_Buffer_count+1)^0,c
  1014   000708  0E00               	movlw	0
  1015   00070A  6E2D               	movwf	_Buffer_count^0,c
  1016   00070C                     l2721:
  1017   00070C  502E               	movf	(_Buffer_count+1)^0,w,c
  1018   00070E  E109               	bnz	u2420
  1019   000710  0E80               	movlw	128
  1020   000712  5C2D               	subwf	_Buffer_count^0,w,c
  1021   000714  A0D8               	btfss	status,0,c
  1022   000716  EF8F  F003         	goto	u2421
  1023   00071A  EF91  F003         	goto	u2420
  1024   00071E                     u2421:
  1025   00071E  EF93  F003         	goto	l2725
  1026   000722                     u2420:
  1027   000722  EF1D  F004         	goto	l2751
  1028   000726                     l2725:
  1029                           
  1030                           ;main.c: 366:                     ByteX[0] = Buffer1[(Buffer_count << 2) + 0];
  1031   000726  0E88               	movlw	low _Buffer1
  1032   000728  6E66               	movwf	??_main^0,c
  1033   00072A  0E02               	movlw	high _Buffer1
  1034   00072C  6E67               	movwf	(??_main+1)^0,c
  1035   00072E  90D8               	bcf	status,0,c
  1036   000730  342D               	rlcf	_Buffer_count^0,w,c
  1037   000732  6ED9               	movwf	fsr2l,c
  1038   000734  342E               	rlcf	(_Buffer_count+1)^0,w,c
  1039   000736  6EDA               	movwf	fsr2h,c
  1040   000738  90D8               	bcf	status,0,c
  1041   00073A  36D9               	rlcf	fsr2l,f,c
  1042   00073C  36DA               	rlcf	fsr2h,f,c
  1043   00073E  5066               	movf	??_main^0,w,c
  1044   000740  26D9               	addwf	fsr2l,f,c
  1045   000742  5067               	movf	(??_main+1)^0,w,c
  1046   000744  22DA               	addwfc	fsr2h,f,c
  1047   000746  50DF               	movf	indf2,w,c
  1048   000748  6E23               	movwf	_ByteX^0,c
  1049                           
  1050                           ;main.c: 367:                     ByteX[1] = Buffer1[(Buffer_count << 2) + 1];
  1051   00074A  0E88               	movlw	low _Buffer1
  1052   00074C  6E66               	movwf	??_main^0,c
  1053   00074E  0E02               	movlw	high _Buffer1
  1054   000750  6E67               	movwf	(??_main+1)^0,c
  1055   000752  0E01               	movlw	1
  1056   000754  2666               	addwf	??_main^0,f,c
  1057   000756  0E00               	movlw	0
  1058   000758  2267               	addwfc	(??_main+1)^0,f,c
  1059   00075A  90D8               	bcf	status,0,c
  1060   00075C  342D               	rlcf	_Buffer_count^0,w,c
  1061   00075E  6ED9               	movwf	fsr2l,c
  1062   000760  342E               	rlcf	(_Buffer_count+1)^0,w,c
  1063   000762  6EDA               	movwf	fsr2h,c
  1064   000764  90D8               	bcf	status,0,c
  1065   000766  36D9               	rlcf	fsr2l,f,c
  1066   000768  36DA               	rlcf	fsr2h,f,c
  1067   00076A  5066               	movf	??_main^0,w,c
  1068   00076C  26D9               	addwf	fsr2l,f,c
  1069   00076E  5067               	movf	(??_main+1)^0,w,c
  1070   000770  22DA               	addwfc	fsr2h,f,c
  1071   000772  50DF               	movf	indf2,w,c
  1072   000774  6E24               	movwf	(_ByteX+1)^0,c
  1073                           
  1074                           ;main.c: 368:                     ByteX[2] = Buffer1[(Buffer_count << 2) + 2];
  1075   000776  0E88               	movlw	low _Buffer1
  1076   000778  6E66               	movwf	??_main^0,c
  1077   00077A  0E02               	movlw	high _Buffer1
  1078   00077C  6E67               	movwf	(??_main+1)^0,c
  1079   00077E  0E02               	movlw	2
  1080   000780  2666               	addwf	??_main^0,f,c
  1081   000782  0E00               	movlw	0
  1082   000784  2267               	addwfc	(??_main+1)^0,f,c
  1083   000786  90D8               	bcf	status,0,c
  1084   000788  342D               	rlcf	_Buffer_count^0,w,c
  1085   00078A  6ED9               	movwf	fsr2l,c
  1086   00078C  342E               	rlcf	(_Buffer_count+1)^0,w,c
  1087   00078E  6EDA               	movwf	fsr2h,c
  1088   000790  90D8               	bcf	status,0,c
  1089   000792  36D9               	rlcf	fsr2l,f,c
  1090   000794  36DA               	rlcf	fsr2h,f,c
  1091   000796  5066               	movf	??_main^0,w,c
  1092   000798  26D9               	addwf	fsr2l,f,c
  1093   00079A  5067               	movf	(??_main+1)^0,w,c
  1094   00079C  22DA               	addwfc	fsr2h,f,c
  1095   00079E  50DF               	movf	indf2,w,c
  1096   0007A0  6E25               	movwf	(_ByteX+2)^0,c
  1097                           
  1098                           ;main.c: 369:                     ByteX[3] = Buffer1[(Buffer_count << 2) + 3];
  1099   0007A2  0E88               	movlw	low _Buffer1
  1100   0007A4  6E66               	movwf	??_main^0,c
  1101   0007A6  0E02               	movlw	high _Buffer1
  1102   0007A8  6E67               	movwf	(??_main+1)^0,c
  1103   0007AA  0E03               	movlw	3
  1104   0007AC  2666               	addwf	??_main^0,f,c
  1105   0007AE  0E00               	movlw	0
  1106   0007B0  2267               	addwfc	(??_main+1)^0,f,c
  1107   0007B2  90D8               	bcf	status,0,c
  1108   0007B4  342D               	rlcf	_Buffer_count^0,w,c
  1109   0007B6  6ED9               	movwf	fsr2l,c
  1110   0007B8  342E               	rlcf	(_Buffer_count+1)^0,w,c
  1111   0007BA  6EDA               	movwf	fsr2h,c
  1112   0007BC  90D8               	bcf	status,0,c
  1113   0007BE  36D9               	rlcf	fsr2l,f,c
  1114   0007C0  36DA               	rlcf	fsr2h,f,c
  1115   0007C2  5066               	movf	??_main^0,w,c
  1116   0007C4  26D9               	addwf	fsr2l,f,c
  1117   0007C6  5067               	movf	(??_main+1)^0,w,c
  1118   0007C8  22DA               	addwfc	fsr2h,f,c
  1119   0007CA  50DF               	movf	indf2,w,c
  1120   0007CC  6E26               	movwf	(_ByteX+3)^0,c
  1121   0007CE                     
  1122                           ;main.c: 371:                     unpack_samples();
  1123   0007CE  EC8D  F007         	call	_unpack_samples	;wreg free
  1124   0007D2                     
  1125                           ;main.c: 373:                     pack(ADC_sample2[0]);
  1126   0007D2  C00F  F04D         	movff	_ADC_sample2,pack@Sample
  1127   0007D6  C010  F04E         	movff	_ADC_sample2+1,pack@Sample+1
  1128   0007DA  EC13  F008         	call	_pack	;wreg free
  1129   0007DE                     
  1130                           ;main.c: 374:                     transmit();
  1131   0007DE  EC74  F008         	call	_transmit	;wreg free
  1132   0007E2                     
  1133                           ;main.c: 375:                     _delay((unsigned long)((4)*(25000000/4000.0)));
  1134   0007E2  0E21               	movlw	33
  1135   0007E4  6E66               	movwf	??_main^0,c
  1136   0007E6  0E76               	movlw	118
  1137   0007E8                     u2687:
  1138   0007E8  2EE8               	decfsz	wreg,f,c
  1139   0007EA  D7FE               	bra	u2687
  1140   0007EC  2E66               	decfsz	??_main^0,f,c
  1141   0007EE  D7FC               	bra	u2687
  1142   0007F0  D000               	nop2	
  1143   0007F2                     
  1144                           ;main.c: 376:                     pack(ADC_sample2[1]);
  1145   0007F2  C011  F04D         	movff	_ADC_sample2+2,pack@Sample
  1146   0007F6  C012  F04E         	movff	_ADC_sample2+3,pack@Sample+1
  1147   0007FA  EC13  F008         	call	_pack	;wreg free
  1148   0007FE                     
  1149                           ;main.c: 377:                     transmit();
  1150   0007FE  EC74  F008         	call	_transmit	;wreg free
  1151   000802                     
  1152                           ;main.c: 378:                      _delay((unsigned long)((4)*(25000000/4000.0)));
  1153   000802  0E21               	movlw	33
  1154   000804  6E66               	movwf	??_main^0,c
  1155   000806  0E76               	movlw	118
  1156   000808                     u2697:
  1157   000808  2EE8               	decfsz	wreg,f,c
  1158   00080A  D7FE               	bra	u2697
  1159   00080C  2E66               	decfsz	??_main^0,f,c
  1160   00080E  D7FC               	bra	u2697
  1161   000810  D000               	nop2	
  1162   000812                     
  1163                           ;main.c: 379:                     pack(ADC_sample2[2]);
  1164   000812  C013  F04D         	movff	_ADC_sample2+4,pack@Sample
  1165   000816  C014  F04E         	movff	_ADC_sample2+5,pack@Sample+1
  1166   00081A  EC13  F008         	call	_pack	;wreg free
  1167   00081E                     
  1168                           ;main.c: 380:                     transmit();
  1169   00081E  EC74  F008         	call	_transmit	;wreg free
  1170   000822                     
  1171                           ;main.c: 381:                     _delay((unsigned long)((4)*(25000000/4000.0)));
  1172   000822  0E21               	movlw	33
  1173   000824  6E66               	movwf	??_main^0,c
  1174   000826  0E76               	movlw	118
  1175   000828                     u2707:
  1176   000828  2EE8               	decfsz	wreg,f,c
  1177   00082A  D7FE               	bra	u2707
  1178   00082C  2E66               	decfsz	??_main^0,f,c
  1179   00082E  D7FC               	bra	u2707
  1180   000830  D000               	nop2	
  1181   000832                     
  1182                           ;main.c: 382:                 }
  1183   000832  4A2D               	infsnz	_Buffer_count^0,f,c
  1184   000834  2A2E               	incf	(_Buffer_count+1)^0,f,c
  1185   000836  EF86  F003         	goto	l2721
  1186   00083A                     l2751:
  1187                           
  1188                           ;main.c: 383:             }
  1189   00083A  0E01               	movlw	1
  1190   00083C  0100               	movlb	0	; () banked
  1191   00083E  2780               	addwf	main@address& (0+255),f,b
  1192   000840  0E00               	movlw	0
  1193   000842  2381               	addwfc	(main@address+1)& (0+255),f,b
  1194   000844  2382               	addwfc	(main@address+2)& (0+255),f,b
  1195   000846  2383               	addwfc	(main@address+3)& (0+255),f,b
  1196   000848                     l176:
  1197                           
  1198                           ; BSR set to: 0
  1199   000848  0E0A               	movlw	10
  1200   00084A  2584               	addwf	main@startBlock& (0+255),w,b
  1201   00084C  6E66               	movwf	??_main^0,c
  1202   00084E  0E00               	movlw	0
  1203   000850  2185               	addwfc	(main@startBlock+1)& (0+255),w,b
  1204   000852  6E67               	movwf	(??_main+1)^0,c
  1205   000854  0E00               	movlw	0
  1206   000856  2186               	addwfc	(main@startBlock+2)& (0+255),w,b
  1207   000858  6E68               	movwf	(??_main+2)^0,c
  1208   00085A  0E00               	movlw	0
  1209   00085C  2187               	addwfc	(main@startBlock+3)& (0+255),w,b
  1210   00085E  6E69               	movwf	(??_main+3)^0,c
  1211   000860  5066               	movf	??_main^0,w,c
  1212   000862  5D80               	subwf	main@address& (0+255),w,b
  1213   000864  5067               	movf	(??_main+1)^0,w,c
  1214   000866  5981               	subwfb	(main@address+1)& (0+255),w,b
  1215   000868  5068               	movf	(??_main+2)^0,w,c
  1216   00086A  5982               	subwfb	(main@address+2)& (0+255),w,b
  1217   00086C  5069               	movf	(??_main+3)^0,w,c
  1218   00086E  5983               	subwfb	(main@address+3)& (0+255),w,b
  1219   000870  A0D8               	btfss	status,0,c
  1220   000872  EF3D  F004         	goto	u2431
  1221   000876  EF3F  F004         	goto	u2430
  1222   00087A                     u2431:
  1223   00087A  EF74  F003         	goto	l2717
  1224   00087E                     u2430:
  1225   00087E                     
  1226                           ; BSR set to: 0
  1227                           ;main.c: 384:             read_event = 0;
  1228   00087E  6A39               	clrf	_read_event^0,c
  1229                           
  1230                           ;main.c: 385:             PORTBbits.RB5 = 1;
  1231   000880  8A81               	bsf	129,5,c	;volatile
  1232   000882  EF0E  F003         	goto	l170
  1233   000886  EF1B  F001         	goto	start
  1234   00088A                     __end_of_main:
  1235                           	callstack 0
  1236                           
  1237 ;; *************** function _unpack_samples *****************
  1238 ;; Defined at:
  1239 ;;		line 232 in file "main.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;		None
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;		None
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  1    wreg      void 
  1246 ;; Registers used:
  1247 ;;		wreg, status,2, status,0
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1253 ;;      Params:         0       0       0       0       0       0       0
  1254 ;;      Locals:         0       0       0       0       0       0       0
  1255 ;;      Temps:          4       0       0       0       0       0       0
  1256 ;;      Totals:         4       0       0       0       0       0       0
  1257 ;;Total ram usage:        4 bytes
  1258 ;; Hardware stack levels used: 1
  1259 ;; Hardware stack levels required when called: 3
  1260 ;; This function calls:
  1261 ;;		Nothing
  1262 ;; This function is called by:
  1263 ;;		_main
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text1
  1268   000F1A                     __ptext1:
  1269                           	callstack 0
  1270   000F1A                     _unpack_samples:
  1271                           	callstack 27
  1272   000F1A                     
  1273                           ;main.c: 233:     ADC_sample2[0] = (ByteX[0] << 2) + (ByteX[1] >> 6);
  1274   000F1A  C024  F04D         	movff	_ByteX+1,??_unpack_samples
  1275   000F1E  0E06               	movlw	6
  1276   000F20  6E4E               	movwf	(??_unpack_samples+1)^0,c
  1277   000F22                     u2255:
  1278   000F22  90D8               	bcf	status,0,c
  1279   000F24  324D               	rrcf	??_unpack_samples^0,f,c
  1280   000F26  2E4E               	decfsz	(??_unpack_samples+1)^0,f,c
  1281   000F28  EF91  F007         	goto	u2255
  1282   000F2C  5023               	movf	_ByteX^0,w,c
  1283   000F2E  6E4F               	movwf	(??_unpack_samples+2)^0,c
  1284   000F30  6A50               	clrf	(??_unpack_samples+3)^0,c
  1285   000F32  90D8               	bcf	status,0,c
  1286   000F34  364F               	rlcf	(??_unpack_samples+2)^0,f,c
  1287   000F36  3650               	rlcf	(??_unpack_samples+3)^0,f,c
  1288   000F38  90D8               	bcf	status,0,c
  1289   000F3A  364F               	rlcf	(??_unpack_samples+2)^0,f,c
  1290   000F3C  3650               	rlcf	(??_unpack_samples+3)^0,f,c
  1291   000F3E  504D               	movf	??_unpack_samples^0,w,c
  1292   000F40  244F               	addwf	(??_unpack_samples+2)^0,w,c
  1293   000F42  6E0F               	movwf	_ADC_sample2^0,c
  1294   000F44  0E00               	movlw	0
  1295   000F46  2050               	addwfc	(??_unpack_samples+3)^0,w,c
  1296   000F48  6E10               	movwf	(_ADC_sample2+1)^0,c
  1297                           
  1298                           ;main.c: 234:     ADC_sample2[1] = ((ByteX[1] & 0x3F) << 4) + (ByteX[2] >> 4);
  1299   000F4A  C025  F04D         	movff	_ByteX+2,??_unpack_samples
  1300   000F4E  3A4D               	swapf	??_unpack_samples^0,f,c
  1301   000F50  0E0F               	movlw	15
  1302   000F52  164D               	andwf	??_unpack_samples^0,f,c
  1303   000F54  5024               	movf	(_ByteX+1)^0,w,c
  1304   000F56  0B3F               	andlw	63
  1305   000F58  6E4E               	movwf	(??_unpack_samples+1)^0,c
  1306   000F5A  6A4F               	clrf	(??_unpack_samples+2)^0,c
  1307   000F5C  3A4E               	swapf	(??_unpack_samples+1)^0,f,c
  1308   000F5E  3A4F               	swapf	(??_unpack_samples+2)^0,f,c
  1309   000F60  0EF0               	movlw	240
  1310   000F62  164F               	andwf	(??_unpack_samples+2)^0,f,c
  1311   000F64  504E               	movf	(??_unpack_samples+1)^0,w,c
  1312   000F66  0B0F               	andlw	15
  1313   000F68  124F               	iorwf	(??_unpack_samples+2)^0,f,c
  1314   000F6A  0EF0               	movlw	240
  1315   000F6C  164E               	andwf	(??_unpack_samples+1)^0,f,c
  1316   000F6E  504D               	movf	??_unpack_samples^0,w,c
  1317   000F70  244E               	addwf	(??_unpack_samples+1)^0,w,c
  1318   000F72  6E11               	movwf	(_ADC_sample2+2)^0,c
  1319   000F74  0E00               	movlw	0
  1320   000F76  204F               	addwfc	(??_unpack_samples+2)^0,w,c
  1321   000F78  6E12               	movwf	(_ADC_sample2+3)^0,c
  1322                           
  1323                           ;main.c: 235:     ADC_sample2[2] = ((ByteX[2] & 0x0F) << 6) + (ByteX[3] >> 2);
  1324   000F7A  C026  F04D         	movff	_ByteX+3,??_unpack_samples
  1325   000F7E  90D8               	bcf	status,0,c
  1326   000F80  324D               	rrcf	??_unpack_samples^0,f,c
  1327   000F82  90D8               	bcf	status,0,c
  1328   000F84  324D               	rrcf	??_unpack_samples^0,f,c
  1329   000F86  5025               	movf	(_ByteX+2)^0,w,c
  1330   000F88  0B0F               	andlw	15
  1331   000F8A  6E4E               	movwf	(??_unpack_samples+1)^0,c
  1332   000F8C  6A4F               	clrf	(??_unpack_samples+2)^0,c
  1333   000F8E  0E06               	movlw	6
  1334   000F90                     u2265:
  1335   000F90  90D8               	bcf	status,0,c
  1336   000F92  364E               	rlcf	(??_unpack_samples+1)^0,f,c
  1337   000F94  364F               	rlcf	(??_unpack_samples+2)^0,f,c
  1338   000F96  2EE8               	decfsz	wreg,f,c
  1339   000F98  EFC8  F007         	goto	u2265
  1340   000F9C  504D               	movf	??_unpack_samples^0,w,c
  1341   000F9E  244E               	addwf	(??_unpack_samples+1)^0,w,c
  1342   000FA0  6E13               	movwf	(_ADC_sample2+4)^0,c
  1343   000FA2  0E00               	movlw	0
  1344   000FA4  204F               	addwfc	(??_unpack_samples+2)^0,w,c
  1345   000FA6  6E14               	movwf	(_ADC_sample2+5)^0,c
  1346   000FA8  0012               	return		;funcret
  1347   000FAA                     __end_of_unpack_samples:
  1348                           	callstack 0
  1349                           
  1350 ;; *************** function _transmit *****************
  1351 ;; Defined at:
  1352 ;;		line 216 in file "main.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;		None
  1355 ;; Auto vars:     Size  Location     Type
  1356 ;;  i               2   18[COMRAM] int 
  1357 ;; Return value:  Size  Location     Type
  1358 ;;                  1    wreg      void 
  1359 ;; Registers used:
  1360 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1361 ;; Tracked objects:
  1362 ;;		On entry : 0/0
  1363 ;;		On exit  : 0/0
  1364 ;;		Unchanged: 0/0
  1365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1366 ;;      Params:         0       0       0       0       0       0       0
  1367 ;;      Locals:         2       0       0       0       0       0       0
  1368 ;;      Temps:          0       0       0       0       0       0       0
  1369 ;;      Totals:         2       0       0       0       0       0       0
  1370 ;;Total ram usage:        2 bytes
  1371 ;; Hardware stack levels used: 1
  1372 ;; Hardware stack levels required when called: 3
  1373 ;; This function calls:
  1374 ;;		Nothing
  1375 ;; This function is called by:
  1376 ;;		_main
  1377 ;; This function uses a non-reentrant model
  1378 ;;
  1379                           
  1380                           	psect	text2
  1381   0010E8                     __ptext2:
  1382                           	callstack 0
  1383   0010E8                     _transmit:
  1384                           	callstack 27
  1385   0010E8                     
  1386                           ;main.c: 217:     int i = 0;
  1387   0010E8  0E00               	movlw	0
  1388   0010EA  6E4E               	movwf	(transmit@i+1)^0,c
  1389   0010EC  0E00               	movlw	0
  1390   0010EE  6E4D               	movwf	transmit@i^0,c
  1391                           
  1392                           ;main.c: 218:     for (i = 0; i < 14; i++) {
  1393   0010F0  0E00               	movlw	0
  1394   0010F2  6E4E               	movwf	(transmit@i+1)^0,c
  1395   0010F4  0E00               	movlw	0
  1396   0010F6  6E4D               	movwf	transmit@i^0,c
  1397   0010F8                     l2585:
  1398                           
  1399                           ;main.c: 219:         TXREG = data_pack[i];
  1400   0010F8  504D               	movf	transmit@i^0,w,c
  1401   0010FA  0F01               	addlw	low _data_pack
  1402   0010FC  6ED9               	movwf	fsr2l,c
  1403   0010FE  6ADA               	clrf	fsr2h,c
  1404   001100  50DF               	movf	indf2,w,c
  1405   001102  6EAD               	movwf	173,c	;volatile
  1406   001104                     l127:
  1407                           
  1408                           ;main.c: 220:         while (!TXSTAbits.TRMT)
  1409   001104  A2AC               	btfss	172,1,c	;volatile
  1410   001106  EF87  F008         	goto	u2231
  1411   00110A  EF89  F008         	goto	u2230
  1412   00110E                     u2231:
  1413   00110E  EF82  F008         	goto	l127
  1414   001112                     u2230:
  1415   001112                     
  1416                           ;main.c: 222:     }
  1417   001112  4A4D               	infsnz	transmit@i^0,f,c
  1418   001114  2A4E               	incf	(transmit@i+1)^0,f,c
  1419   001116  BE4E               	btfsc	(transmit@i+1)^0,7,c
  1420   001118  EF97  F008         	goto	u2241
  1421   00111C  504E               	movf	(transmit@i+1)^0,w,c
  1422   00111E  E109               	bnz	u2240
  1423   001120  0E0E               	movlw	14
  1424   001122  5C4D               	subwf	transmit@i^0,w,c
  1425   001124  A0D8               	btfss	status,0,c
  1426   001126  EF97  F008         	goto	u2241
  1427   00112A  EF99  F008         	goto	u2240
  1428   00112E                     u2241:
  1429   00112E  EF7C  F008         	goto	l2585
  1430   001132                     u2240:
  1431   001132  0012               	return		;funcret
  1432   001134                     __end_of_transmit:
  1433                           	callstack 0
  1434                           
  1435 ;; *************** function _pack *****************
  1436 ;; Defined at:
  1437 ;;		line 208 in file "main.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;  Sample          2   18[COMRAM] unsigned int 
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;  i               2   22[COMRAM] int 
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  1    wreg      void 
  1444 ;; Registers used:
  1445 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1451 ;;      Params:         2       0       0       0       0       0       0
  1452 ;;      Locals:         2       0       0       0       0       0       0
  1453 ;;      Temps:          2       0       0       0       0       0       0
  1454 ;;      Totals:         6       0       0       0       0       0       0
  1455 ;;Total ram usage:        6 bytes
  1456 ;; Hardware stack levels used: 1
  1457 ;; Hardware stack levels required when called: 3
  1458 ;; This function calls:
  1459 ;;		Nothing
  1460 ;; This function is called by:
  1461 ;;		_main
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           	psect	text3
  1466   001026                     __ptext3:
  1467                           	callstack 0
  1468   001026                     _pack:
  1469                           	callstack 27
  1470   001026                     
  1471                           ;main.c: 209:     for (int i = 0; i<14; i++)
  1472   001026  0E00               	movlw	0
  1473   001028  6E52               	movwf	(pack@i+1)^0,c
  1474   00102A  0E00               	movlw	0
  1475   00102C  6E51               	movwf	pack@i^0,c
  1476   00102E                     l2567:
  1477                           
  1478                           ;main.c: 210:         data_pack[i] = 0x00;
  1479   00102E  5051               	movf	pack@i^0,w,c
  1480   001030  0F01               	addlw	low _data_pack
  1481   001032  6ED9               	movwf	fsr2l,c
  1482   001034  6ADA               	clrf	fsr2h,c
  1483   001036  6ADF               	clrf	indf2,c
  1484   001038  4A51               	infsnz	pack@i^0,f,c
  1485   00103A  2A52               	incf	(pack@i+1)^0,f,c
  1486   00103C  BE52               	btfsc	(pack@i+1)^0,7,c
  1487   00103E  EF2A  F008         	goto	u2221
  1488   001042  5052               	movf	(pack@i+1)^0,w,c
  1489   001044  E109               	bnz	u2220
  1490   001046  0E0E               	movlw	14
  1491   001048  5C51               	subwf	pack@i^0,w,c
  1492   00104A  A0D8               	btfss	status,0,c
  1493   00104C  EF2A  F008         	goto	u2221
  1494   001050  EF2C  F008         	goto	u2220
  1495   001054                     u2221:
  1496   001054  EF17  F008         	goto	l2567
  1497   001058                     u2220:
  1498   001058                     
  1499                           ;main.c: 211:     data_pack[0] = 0xAA;
  1500   001058  0EAA               	movlw	170
  1501   00105A  6E01               	movwf	_data_pack^0,c
  1502   00105C                     
  1503                           ;main.c: 212:     data_pack[5] = (unsigned char)(Sample >> 2);
  1504   00105C  C04D  F04F         	movff	pack@Sample,??_pack
  1505   001060  C04E  F050         	movff	pack@Sample+1,??_pack+1
  1506   001064  90D8               	bcf	status,0,c
  1507   001066  3250               	rrcf	(??_pack+1)^0,f,c
  1508   001068  324F               	rrcf	??_pack^0,f,c
  1509   00106A  90D8               	bcf	status,0,c
  1510   00106C  3250               	rrcf	(??_pack+1)^0,f,c
  1511   00106E  324F               	rrcf	??_pack^0,f,c
  1512   001070  504F               	movf	??_pack^0,w,c
  1513   001072  6E06               	movwf	(_data_pack+5)^0,c
  1514   001074                     
  1515                           ;main.c: 213:     data_pack[7] = (unsigned char)((Sample & 0x0003) << 2);
  1516   001074  C04D  F04F         	movff	pack@Sample,??_pack
  1517   001078  0E03               	movlw	3
  1518   00107A  164F               	andwf	??_pack^0,f,c
  1519   00107C  90D8               	bcf	status,0,c
  1520   00107E  364F               	rlcf	??_pack^0,f,c
  1521   001080  90D8               	bcf	status,0,c
  1522   001082  344F               	rlcf	??_pack^0,w,c
  1523   001084  6E08               	movwf	(_data_pack+7)^0,c
  1524   001086  0012               	return		;funcret
  1525   001088                     __end_of_pack:
  1526                           	callstack 0
  1527                           
  1528 ;; *************** function _init_variables *****************
  1529 ;; Defined at:
  1530 ;;		line 114 in file "main.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;		None
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;		None
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  1    wreg      void 
  1537 ;; Registers used:
  1538 ;;		wreg, status,2
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1544 ;;      Params:         0       0       0       0       0       0       0
  1545 ;;      Locals:         0       0       0       0       0       0       0
  1546 ;;      Temps:          0       0       0       0       0       0       0
  1547 ;;      Totals:         0       0       0       0       0       0       0
  1548 ;;Total ram usage:        0 bytes
  1549 ;; Hardware stack levels used: 1
  1550 ;; Hardware stack levels required when called: 3
  1551 ;; This function calls:
  1552 ;;		Nothing
  1553 ;; This function is called by:
  1554 ;;		_main
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           	psect	text4
  1559   00116E                     __ptext4:
  1560                           	callstack 0
  1561   00116E                     _init_variables:
  1562                           	callstack 27
  1563   00116E                     
  1564                           ;main.c: 115:     ADC_sample[0] = 0;
  1565   00116E  0E00               	movlw	0
  1566   001170  6E16               	movwf	(_ADC_sample+1)^0,c
  1567   001172  0E00               	movlw	0
  1568   001174  6E15               	movwf	_ADC_sample^0,c
  1569                           
  1570                           ;main.c: 116:     ADC_sample[1] = 0;
  1571   001176  0E00               	movlw	0
  1572   001178  6E18               	movwf	(_ADC_sample+3)^0,c
  1573   00117A  0E00               	movlw	0
  1574   00117C  6E17               	movwf	(_ADC_sample+2)^0,c
  1575                           
  1576                           ;main.c: 117:     ADC_sample[2] = 0;
  1577   00117E  0E00               	movlw	0
  1578   001180  6E1A               	movwf	(_ADC_sample+5)^0,c
  1579   001182  0E00               	movlw	0
  1580   001184  6E19               	movwf	(_ADC_sample+4)^0,c
  1581                           
  1582                           ;main.c: 118:     ADC_sample2[0] = 0;
  1583   001186  0E00               	movlw	0
  1584   001188  6E10               	movwf	(_ADC_sample2+1)^0,c
  1585   00118A  0E00               	movlw	0
  1586   00118C  6E0F               	movwf	_ADC_sample2^0,c
  1587                           
  1588                           ;main.c: 119:     ADC_sample2[1] = 0;
  1589   00118E  0E00               	movlw	0
  1590   001190  6E12               	movwf	(_ADC_sample2+3)^0,c
  1591   001192  0E00               	movlw	0
  1592   001194  6E11               	movwf	(_ADC_sample2+2)^0,c
  1593                           
  1594                           ;main.c: 120:     ADC_sample2[2] = 0;
  1595   001196  0E00               	movlw	0
  1596   001198  6E14               	movwf	(_ADC_sample2+5)^0,c
  1597   00119A  0E00               	movlw	0
  1598   00119C  6E13               	movwf	(_ADC_sample2+4)^0,c
  1599   00119E  0012               	return		;funcret
  1600   0011A0                     __end_of_init_variables:
  1601                           	callstack 0
  1602                           
  1603 ;; *************** function _init *****************
  1604 ;; Defined at:
  1605 ;;		line 139 in file "main.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  ret             2   41[COMRAM] int 
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  1    wreg      void 
  1612 ;; Registers used:
  1613 ;;		wreg, status,2, status,0, cstack
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1619 ;;      Params:         0       0       0       0       0       0       0
  1620 ;;      Locals:         2       0       0       0       0       0       0
  1621 ;;      Temps:          0       0       0       0       0       0       0
  1622 ;;      Totals:         2       0       0       0       0       0       0
  1623 ;;Total ram usage:        2 bytes
  1624 ;; Hardware stack levels used: 1
  1625 ;; Hardware stack levels required when called: 8
  1626 ;; This function calls:
  1627 ;;		_UART_Init
  1628 ;;		_init_SDMMC
  1629 ;; This function is called by:
  1630 ;;		_main
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text5
  1635   001088                     __ptext5:
  1636                           	callstack 0
  1637   001088                     _init:
  1638                           	callstack 22
  1639   001088                     
  1640                           ;main.c: 141:     TRISA = 0x01;
  1641   001088  0E01               	movlw	1
  1642   00108A  6E92               	movwf	146,c	;volatile
  1643   00108C                     
  1644                           ;main.c: 142:     PORTA = 0xFF;
  1645   00108C  6880               	setf	128,c	;volatile
  1646                           
  1647                           ;main.c: 146:     TRISB = 0b00001111;
  1648   00108E  0E0F               	movlw	15
  1649   001090  6E93               	movwf	147,c	;volatile
  1650                           
  1651                           ;main.c: 147:     PORTB = 0xF0;
  1652   001092  0EF0               	movlw	240
  1653   001094  6E81               	movwf	129,c	;volatile
  1654                           
  1655                           ;main.c: 159:     TRISC = 0b11010100;
  1656   001096  0ED4               	movlw	212
  1657   001098  6E94               	movwf	148,c	;volatile
  1658   00109A                     
  1659                           ;main.c: 160:     PORTC = 0xFF;
  1660   00109A  6882               	setf	130,c	;volatile
  1661                           
  1662                           ;main.c: 171:     ADCON1 = 0x0E;
  1663   00109C  0E0E               	movlw	14
  1664   00109E  6EC1               	movwf	193,c	;volatile
  1665                           
  1666                           ;main.c: 172:     ADCON2 = 0b10101110;
  1667   0010A0  0EAE               	movlw	174
  1668   0010A2  6EC0               	movwf	192,c	;volatile
  1669                           
  1670                           ;main.c: 173:     ADCON0 = 0x01;
  1671   0010A4  0E01               	movlw	1
  1672   0010A6  6EC2               	movwf	194,c	;volatile
  1673                           
  1674                           ;main.c: 175:     T0CON = 0b10000100;
  1675   0010A8  0E84               	movlw	132
  1676   0010AA  6ED5               	movwf	213,c	;volatile
  1677                           
  1678                           ;main.c: 177:     TMR0H = 0xFC;
  1679   0010AC  0EFC               	movlw	252
  1680   0010AE  6ED7               	movwf	215,c	;volatile
  1681                           
  1682                           ;main.c: 178:     TMR0L = 0xF3;
  1683   0010B0  0EF3               	movlw	243
  1684   0010B2  6ED6               	movwf	214,c	;volatile
  1685                           
  1686                           ;main.c: 187:     INTCON = 0b11100000;
  1687   0010B4  0EE0               	movlw	224
  1688   0010B6  6EF2               	movwf	242,c	;volatile
  1689                           
  1690                           ;main.c: 189:     INTCON2 = 0b10000100;
  1691   0010B8  0E84               	movlw	132
  1692   0010BA  6EF1               	movwf	241,c	;volatile
  1693                           
  1694                           ;main.c: 191:     PIE1 = 0x40;
  1695   0010BC  0E40               	movlw	64
  1696   0010BE  6E9D               	movwf	157,c	;volatile
  1697   0010C0                     
  1698                           ;main.c: 195:     UART_Init();
  1699   0010C0  ECE5  F008         	call	_UART_Init	;wreg free
  1700   0010C4                     
  1701                           ;main.c: 201:     PORTBbits.RB4 = 0;
  1702   0010C4  9881               	bcf	129,4,c	;volatile
  1703   0010C6                     
  1704                           ;main.c: 202:     ret = init_SDMMC();
  1705   0010C6  EC9A  F008         	call	_init_SDMMC	;wreg free
  1706   0010CA  C05F  F064         	movff	?_init_SDMMC,init@ret
  1707   0010CE  C060  F065         	movff	?_init_SDMMC+1,init@ret+1
  1708                           
  1709                           ;main.c: 204:     if (ret == 0)
  1710   0010D2  5064               	movf	init@ret^0,w,c
  1711   0010D4  1065               	iorwf	(init@ret+1)^0,w,c
  1712   0010D6  A4D8               	btfss	status,2,c
  1713   0010D8  EF70  F008         	goto	u2211
  1714   0010DC  EF72  F008         	goto	u2210
  1715   0010E0                     u2211:
  1716   0010E0  EF73  F008         	goto	l117
  1717   0010E4                     u2210:
  1718   0010E4                     
  1719                           ;main.c: 205:         PORTBbits.RB4 = 1;
  1720   0010E4  8881               	bsf	129,4,c	;volatile
  1721   0010E6                     l117:
  1722   0010E6  0012               	return		;funcret
  1723   0010E8                     __end_of_init:
  1724                           	callstack 0
  1725                           
  1726 ;; *************** function _init_SDMMC *****************
  1727 ;; Defined at:
  1728 ;;		line 106 in file "main.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;		None
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  ret             2   39[COMRAM] int 
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  2   36[COMRAM] int 
  1735 ;; Registers used:
  1736 ;;		wreg, status,2, status,0, cstack
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1742 ;;      Params:         2       0       0       0       0       0       0
  1743 ;;      Locals:         2       0       0       0       0       0       0
  1744 ;;      Temps:          1       0       0       0       0       0       0
  1745 ;;      Totals:         5       0       0       0       0       0       0
  1746 ;;Total ram usage:        5 bytes
  1747 ;; Hardware stack levels used: 1
  1748 ;; Hardware stack levels required when called: 7
  1749 ;; This function calls:
  1750 ;;		_SD_init
  1751 ;;		_SPI1_Init
  1752 ;; This function is called by:
  1753 ;;		_init
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757                           	psect	text6
  1758   001134                     __ptext6:
  1759                           	callstack 0
  1760   001134                     _init_SDMMC:
  1761                           	callstack 22
  1762   001134                     
  1763                           ;main.c: 108:     SPI1_Init(SPI_MASTER_OSC_DIV64, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE
      +                          _LOW, SPI_ACTIVE_2_IDLE);
  1764   001134  0E00               	movlw	0
  1765   001136  6E4D               	movwf	SPI1_Init@sDataSample^0,c
  1766   001138  0E00               	movlw	0
  1767   00113A  6E4E               	movwf	SPI1_Init@sClockIdle^0,c
  1768   00113C  0E40               	movlw	64
  1769   00113E  6E4F               	movwf	SPI1_Init@sTransmitEdge^0,c
  1770   001140  0E22               	movlw	34
  1771   001142  ECF3  F008         	call	_SPI1_Init
  1772   001146                     
  1773                           ;main.c: 109:     ret = SD_init();
  1774   001146  EC45  F004         	call	_SD_init	;wreg free
  1775   00114A  6E61               	movwf	??_init_SDMMC^0,c
  1776   00114C  5061               	movf	??_init_SDMMC^0,w,c
  1777   00114E  6E62               	movwf	init_SDMMC@ret^0,c
  1778   001150  6A63               	clrf	(init_SDMMC@ret+1)^0,c
  1779   001152                     
  1780                           ;main.c: 110:     SPI1_Init(SPI_MASTER_OSC_DIV64, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE
      +                          _LOW, SPI_ACTIVE_2_IDLE);
  1781   001152  0E00               	movlw	0
  1782   001154  6E4D               	movwf	SPI1_Init@sDataSample^0,c
  1783   001156  0E00               	movlw	0
  1784   001158  6E4E               	movwf	SPI1_Init@sClockIdle^0,c
  1785   00115A  0E40               	movlw	64
  1786   00115C  6E4F               	movwf	SPI1_Init@sTransmitEdge^0,c
  1787   00115E  0E22               	movlw	34
  1788   001160  ECF3  F008         	call	_SPI1_Init
  1789   001164                     
  1790                           ;main.c: 111:     return ret;
  1791   001164  C062  F05F         	movff	init_SDMMC@ret,?_init_SDMMC
  1792   001168  C063  F060         	movff	init_SDMMC@ret+1,?_init_SDMMC+1
  1793   00116C  0012               	return		;funcret
  1794   00116E                     __end_of_init_SDMMC:
  1795                           	callstack 0
  1796                           
  1797 ;; *************** function _SPI1_Init *****************
  1798 ;; Defined at:
  1799 ;;		line 5 in file "spi.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  sType           1    wreg     enum E2
  1802 ;;  sDataSample     1   18[COMRAM] enum E10
  1803 ;;  sClockIdle      1   19[COMRAM] enum E14
  1804 ;;  sTransmitEdg    1   20[COMRAM] enum E18
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;  sType           1   21[COMRAM] enum E2
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg, status,2, status,0
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1816 ;;      Params:         3       0       0       0       0       0       0
  1817 ;;      Locals:         1       0       0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0
  1819 ;;      Totals:         4       0       0       0       0       0       0
  1820 ;;Total ram usage:        4 bytes
  1821 ;; Hardware stack levels used: 1
  1822 ;; Hardware stack levels required when called: 3
  1823 ;; This function calls:
  1824 ;;		Nothing
  1825 ;; This function is called by:
  1826 ;;		_init_SDMMC
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text7
  1831   0011E6                     __ptext7:
  1832                           	callstack 0
  1833   0011E6                     _SPI1_Init:
  1834                           	callstack 25
  1835                           
  1836                           ;incstack = 0
  1837                           ;SPI1_Init@sType stored from wreg
  1838   0011E6  6E50               	movwf	SPI1_Init@sType^0,c
  1839   0011E8                     
  1840                           ;spi.c: 5: void SPI1_Init(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sC
      +                          lockIdle, Spi_Transmit_Edge sTransmitEdge);spi.c: 6: {;spi.c: 21:   SSPSTAT = sDataSampl
      +                          e | sTransmitEdge;
  1841   0011E8  504D               	movf	SPI1_Init@sDataSample^0,w,c
  1842   0011EA  104F               	iorwf	SPI1_Init@sTransmitEdge^0,w,c
  1843   0011EC  6EC7               	movwf	199,c	;volatile
  1844                           
  1845                           ;spi.c: 24:   SSPCON1 = sType | sClockIdle;
  1846   0011EE  5050               	movf	SPI1_Init@sType^0,w,c
  1847   0011F0  104E               	iorwf	SPI1_Init@sClockIdle^0,w,c
  1848   0011F2  6EC6               	movwf	198,c	;volatile
  1849   0011F4  0012               	return		;funcret
  1850   0011F6                     __end_of_SPI1_Init:
  1851                           	callstack 0
  1852                           
  1853 ;; *************** function _SD_init *****************
  1854 ;; Defined at:
  1855 ;;		line 16 in file "sd_routines.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;		None
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;  retry           2   34[COMRAM] unsigned int 
  1860 ;;  response        1   33[COMRAM] unsigned char 
  1861 ;;  i               1   32[COMRAM] unsigned char 
  1862 ;;  SD_version      1   31[COMRAM] unsigned char 
  1863 ;; Return value:  Size  Location     Type
  1864 ;;                  1    wreg      unsigned char 
  1865 ;; Registers used:
  1866 ;;		wreg, status,2, status,0, cstack
  1867 ;; Tracked objects:
  1868 ;;		On entry : 0/0
  1869 ;;		On exit  : 0/0
  1870 ;;		Unchanged: 0/0
  1871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1872 ;;      Params:         0       0       0       0       0       0       0
  1873 ;;      Locals:         5       0       0       0       0       0       0
  1874 ;;      Temps:          0       0       0       0       0       0       0
  1875 ;;      Totals:         5       0       0       0       0       0       0
  1876 ;;Total ram usage:        5 bytes
  1877 ;; Hardware stack levels used: 1
  1878 ;; Hardware stack levels required when called: 6
  1879 ;; This function calls:
  1880 ;;		_SD_sendCommand
  1881 ;;		_SPI1_Write
  1882 ;; This function is called by:
  1883 ;;		_init_SDMMC
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           	psect	text8
  1888   00088A                     __ptext8:
  1889                           	callstack 0
  1890   00088A                     _SD_init:
  1891                           	callstack 22
  1892   00088A                     
  1893                           ;sd_routines.c: 17:     unsigned char i, response, SD_version;;sd_routines.c: 18:     un
      +                          signed int retry = 0;
  1894   00088A  0E00               	movlw	0
  1895   00088C  6E5E               	movwf	(SD_init@retry+1)^0,c
  1896   00088E  0E00               	movlw	0
  1897   000890  6E5D               	movwf	SD_init@retry^0,c
  1898   000892                     
  1899                           ;sd_routines.c: 22:     for (i = 0; i < 20; i++)
  1900   000892  6A5B               	clrf	SD_init@i^0,c
  1901   000894                     l2433:
  1902                           
  1903                           ;sd_routines.c: 23:         SPI1_Write(0xFF);
  1904   000894  0EFF               	movlw	255
  1905   000896  EC03  F009         	call	_SPI1_Write
  1906   00089A  2A5B               	incf	SD_init@i^0,f,c
  1907   00089C  0E13               	movlw	19
  1908   00089E  645B               	cpfsgt	SD_init@i^0,c
  1909   0008A0  EF54  F004         	goto	u2101
  1910   0008A4  EF56  F004         	goto	u2100
  1911   0008A8                     u2101:
  1912   0008A8  EF4A  F004         	goto	l2433
  1913   0008AC                     u2100:
  1914   0008AC                     
  1915                           ;sd_routines.c: 27:     PORTC &= 0xFE;
  1916   0008AC  9082               	bcf	130,0,c	;volatile
  1917   0008AE                     l2441:
  1918                           
  1919                           ;sd_routines.c: 30:         response = SD_sendCommand(0, 0);
  1920   0008AE  0E00               	movlw	0
  1921   0008B0  6E4E               	movwf	SD_sendCommand@arg^0,c
  1922   0008B2  0E00               	movlw	0
  1923   0008B4  6E4F               	movwf	(SD_sendCommand@arg+1)^0,c
  1924   0008B6  0E00               	movlw	0
  1925   0008B8  6E50               	movwf	(SD_sendCommand@arg+2)^0,c
  1926   0008BA  0E00               	movlw	0
  1927   0008BC  6E51               	movwf	(SD_sendCommand@arg+3)^0,c
  1928   0008BE  0E00               	movlw	0
  1929   0008C0  ECEA  F005         	call	_SD_sendCommand
  1930   0008C4  6E5C               	movwf	SD_init@response^0,c
  1931   0008C6                     
  1932                           ;sd_routines.c: 31:         retry++;
  1933   0008C6  4A5D               	infsnz	SD_init@retry^0,f,c
  1934   0008C8  2A5E               	incf	(SD_init@retry+1)^0,f,c
  1935   0008CA                     
  1936                           ;sd_routines.c: 32:         if (retry > 0xFE) return 1;
  1937   0008CA  505E               	movf	(SD_init@retry+1)^0,w,c
  1938   0008CC  E108               	bnz	u2110
  1939   0008CE  285D               	incf	SD_init@retry^0,w,c
  1940   0008D0  A0D8               	btfss	status,0,c
  1941   0008D2  EF6D  F004         	goto	u2111
  1942   0008D6  EF6F  F004         	goto	u2110
  1943   0008DA                     u2111:
  1944   0008DA  EF72  F004         	goto	l2451
  1945   0008DE                     u2110:
  1946   0008DE  0E01               	movlw	1
  1947   0008E0  EF1F  F005         	goto	l206
  1948   0008E4                     l2451:
  1949                           
  1950                           ;sd_routines.c: 33:     } while (response != 0x01);
  1951   0008E4  045C               	decf	SD_init@response^0,w,c
  1952   0008E6  A4D8               	btfss	status,2,c
  1953   0008E8  EF78  F004         	goto	u2121
  1954   0008EC  EF7A  F004         	goto	u2120
  1955   0008F0                     u2121:
  1956   0008F0  EF57  F004         	goto	l2441
  1957   0008F4                     u2120:
  1958   0008F4                     
  1959                           ;sd_routines.c: 35:     PORTC |= 0x01;
  1960   0008F4  8082               	bsf	130,0,c	;volatile
  1961   0008F6                     
  1962                           ;sd_routines.c: 36:     SPI1_Write(0xFF);
  1963   0008F6  0EFF               	movlw	255
  1964   0008F8  EC03  F009         	call	_SPI1_Write
  1965   0008FC                     
  1966                           ;sd_routines.c: 37:     SPI1_Write(0xFF);
  1967   0008FC  0EFF               	movlw	255
  1968   0008FE  EC03  F009         	call	_SPI1_Write
  1969   000902                     
  1970                           ;sd_routines.c: 38:     retry = 0;
  1971   000902  0E00               	movlw	0
  1972   000904  6E5E               	movwf	(SD_init@retry+1)^0,c
  1973   000906  0E00               	movlw	0
  1974   000908  6E5D               	movwf	SD_init@retry^0,c
  1975   00090A                     
  1976                           ;sd_routines.c: 42:     SD_version = 2;
  1977   00090A  0E02               	movlw	2
  1978   00090C  6E5A               	movwf	SD_init@SD_version^0,c
  1979   00090E                     l2463:
  1980                           
  1981                           ;sd_routines.c: 46:         response = SD_sendCommand(8, 0x000001AA);
  1982   00090E  0EAA               	movlw	170
  1983   000910  6E4E               	movwf	SD_sendCommand@arg^0,c
  1984   000912  0E01               	movlw	1
  1985   000914  6E4F               	movwf	(SD_sendCommand@arg+1)^0,c
  1986   000916  0E00               	movlw	0
  1987   000918  6E50               	movwf	(SD_sendCommand@arg+2)^0,c
  1988   00091A  0E00               	movlw	0
  1989   00091C  6E51               	movwf	(SD_sendCommand@arg+3)^0,c
  1990   00091E  0E08               	movlw	8
  1991   000920  ECEA  F005         	call	_SD_sendCommand
  1992   000924  6E5C               	movwf	SD_init@response^0,c
  1993   000926                     
  1994                           ;sd_routines.c: 48:         retry++;
  1995   000926  4A5D               	infsnz	SD_init@retry^0,f,c
  1996   000928  2A5E               	incf	(SD_init@retry+1)^0,f,c
  1997   00092A                     
  1998                           ;sd_routines.c: 49:         if (retry > 0xfe) {
  1999   00092A  505E               	movf	(SD_init@retry+1)^0,w,c
  2000   00092C  E108               	bnz	u2130
  2001   00092E  285D               	incf	SD_init@retry^0,w,c
  2002   000930  A0D8               	btfss	status,0,c
  2003   000932  EF9D  F004         	goto	u2131
  2004   000936  EF9F  F004         	goto	u2130
  2005   00093A                     u2131:
  2006   00093A  EFA5  F004         	goto	l2471
  2007   00093E                     u2130:
  2008   00093E                     
  2009                           ;sd_routines.c: 51:             SD_version = 1;
  2010   00093E  0E01               	movlw	1
  2011   000940  6E5A               	movwf	SD_init@SD_version^0,c
  2012                           
  2013                           ;sd_routines.c: 52:             cardType = 1;
  2014   000942  0E01               	movlw	1
  2015   000944  6E33               	movwf	_cardType^0,c	;volatile
  2016                           
  2017                           ;sd_routines.c: 54:             break;
  2018   000946  EFAD  F004         	goto	l2473
  2019   00094A                     l2471:
  2020                           
  2021                           ;sd_routines.c: 56:     } while (response != 0x01);
  2022   00094A  045C               	decf	SD_init@response^0,w,c
  2023   00094C  A4D8               	btfss	status,2,c
  2024   00094E  EFAB  F004         	goto	u2141
  2025   000952  EFAD  F004         	goto	u2140
  2026   000956                     u2141:
  2027   000956  EF87  F004         	goto	l2463
  2028   00095A                     u2140:
  2029   00095A                     l2473:
  2030                           
  2031                           ;sd_routines.c: 58:     retry = 0;
  2032   00095A  0E00               	movlw	0
  2033   00095C  6E5E               	movwf	(SD_init@retry+1)^0,c
  2034   00095E  0E00               	movlw	0
  2035   000960  6E5D               	movwf	SD_init@retry^0,c
  2036   000962                     l2475:
  2037   000962  0E00               	movlw	0
  2038   000964  6E4E               	movwf	SD_sendCommand@arg^0,c
  2039   000966  0E00               	movlw	0
  2040   000968  6E4F               	movwf	(SD_sendCommand@arg+1)^0,c
  2041   00096A  0E00               	movlw	0
  2042   00096C  6E50               	movwf	(SD_sendCommand@arg+2)^0,c
  2043   00096E  0E00               	movlw	0
  2044   000970  6E51               	movwf	(SD_sendCommand@arg+3)^0,c
  2045   000972  0E37               	movlw	55
  2046   000974  ECEA  F005         	call	_SD_sendCommand
  2047   000978                     
  2048                           ;sd_routines.c: 63:         response = SD_sendCommand(41, 0x40000000);
  2049   000978  0E00               	movlw	0
  2050   00097A  6E4E               	movwf	SD_sendCommand@arg^0,c
  2051   00097C  0E00               	movlw	0
  2052   00097E  6E4F               	movwf	(SD_sendCommand@arg+1)^0,c
  2053   000980  0E00               	movlw	0
  2054   000982  6E50               	movwf	(SD_sendCommand@arg+2)^0,c
  2055   000984  0E40               	movlw	64
  2056   000986  6E51               	movwf	(SD_sendCommand@arg+3)^0,c
  2057   000988  0E29               	movlw	41
  2058   00098A  ECEA  F005         	call	_SD_sendCommand
  2059   00098E  6E5C               	movwf	SD_init@response^0,c
  2060   000990                     
  2061                           ;sd_routines.c: 64:         retry++;
  2062   000990  4A5D               	infsnz	SD_init@retry^0,f,c
  2063   000992  2A5E               	incf	(SD_init@retry+1)^0,f,c
  2064   000994                     
  2065                           ;sd_routines.c: 65:         if (retry > 0x4fe) {
  2066   000994  285D               	incf	SD_init@retry^0,w,c
  2067   000996  0E04               	movlw	4
  2068   000998  585E               	subwfb	(SD_init@retry+1)^0,w,c
  2069   00099A  A0D8               	btfss	status,0,c
  2070   00099C  EFD2  F004         	goto	u2151
  2071   0009A0  EFD4  F004         	goto	u2150
  2072   0009A4                     u2151:
  2073   0009A4  EFD7  F004         	goto	l2487
  2074   0009A8                     u2150:
  2075   0009A8                     
  2076                           ;sd_routines.c: 67:             return 2;
  2077   0009A8  0E02               	movlw	2
  2078   0009AA  EF1F  F005         	goto	l206
  2079   0009AE                     l2487:
  2080                           
  2081                           ;sd_routines.c: 69:     } while (response != 0x00);
  2082   0009AE  505C               	movf	SD_init@response^0,w,c
  2083   0009B0  A4D8               	btfss	status,2,c
  2084   0009B2  EFDD  F004         	goto	u2161
  2085   0009B6  EFDF  F004         	goto	u2160
  2086   0009BA                     u2161:
  2087   0009BA  EFB1  F004         	goto	l2475
  2088   0009BE                     u2160:
  2089   0009BE                     
  2090                           ;sd_routines.c: 71:     retry = 0;
  2091   0009BE  0E00               	movlw	0
  2092   0009C0  6E5E               	movwf	(SD_init@retry+1)^0,c
  2093   0009C2  0E00               	movlw	0
  2094   0009C4  6E5D               	movwf	SD_init@retry^0,c
  2095   0009C6                     
  2096                           ;sd_routines.c: 72:     SDHC_flag = 0;
  2097   0009C6  6A34               	clrf	_SDHC_flag^0,c	;volatile
  2098   0009C8                     
  2099                           ;sd_routines.c: 75:     if (SD_version == 2) {
  2100   0009C8  0E02               	movlw	2
  2101   0009CA  185A               	xorwf	SD_init@SD_version^0,w,c
  2102   0009CC  A4D8               	btfss	status,2,c
  2103   0009CE  EFEB  F004         	goto	u2171
  2104   0009D2  EFED  F004         	goto	u2170
  2105   0009D6                     u2171:
  2106   0009D6  EF1E  F005         	goto	l2511
  2107   0009DA                     u2170:
  2108   0009DA                     l2495:
  2109                           
  2110                           ;sd_routines.c: 77:             response = SD_sendCommand(58, 0);
  2111   0009DA  0E00               	movlw	0
  2112   0009DC  6E4E               	movwf	SD_sendCommand@arg^0,c
  2113   0009DE  0E00               	movlw	0
  2114   0009E0  6E4F               	movwf	(SD_sendCommand@arg+1)^0,c
  2115   0009E2  0E00               	movlw	0
  2116   0009E4  6E50               	movwf	(SD_sendCommand@arg+2)^0,c
  2117   0009E6  0E00               	movlw	0
  2118   0009E8  6E51               	movwf	(SD_sendCommand@arg+3)^0,c
  2119   0009EA  0E3A               	movlw	58
  2120   0009EC  ECEA  F005         	call	_SD_sendCommand
  2121   0009F0  6E5C               	movwf	SD_init@response^0,c
  2122   0009F2                     
  2123                           ;sd_routines.c: 78:             retry++;
  2124   0009F2  4A5D               	infsnz	SD_init@retry^0,f,c
  2125   0009F4  2A5E               	incf	(SD_init@retry+1)^0,f,c
  2126   0009F6                     
  2127                           ;sd_routines.c: 79:             if (retry > 0xfe) {
  2128   0009F6  505E               	movf	(SD_init@retry+1)^0,w,c
  2129   0009F8  E108               	bnz	u2180
  2130   0009FA  285D               	incf	SD_init@retry^0,w,c
  2131   0009FC  A0D8               	btfss	status,0,c
  2132   0009FE  EF03  F005         	goto	u2181
  2133   000A02  EF05  F005         	goto	u2180
  2134   000A06                     u2181:
  2135   000A06  EF08  F005         	goto	l2503
  2136   000A0A                     u2180:
  2137   000A0A                     
  2138                           ;sd_routines.c: 81:                 cardType = 0;
  2139   000A0A  6A33               	clrf	_cardType^0,c	;volatile
  2140                           
  2141                           ;sd_routines.c: 82:                 break;
  2142   000A0C  EF10  F005         	goto	l2505
  2143   000A10                     l2503:
  2144                           
  2145                           ;sd_routines.c: 84:         } while (response != 0x00);
  2146   000A10  505C               	movf	SD_init@response^0,w,c
  2147   000A12  A4D8               	btfss	status,2,c
  2148   000A14  EF0E  F005         	goto	u2191
  2149   000A18  EF10  F005         	goto	u2190
  2150   000A1C                     u2191:
  2151   000A1C  EFED  F004         	goto	l2495
  2152   000A20                     u2190:
  2153   000A20                     l2505:
  2154                           
  2155                           ;sd_routines.c: 86:         if (SDHC_flag == 1) cardType = 2;
  2156   000A20  0434               	decf	_SDHC_flag^0,w,c	;volatile
  2157   000A22  A4D8               	btfss	status,2,c
  2158   000A24  EF16  F005         	goto	u2201
  2159   000A28  EF18  F005         	goto	u2200
  2160   000A2C                     u2201:
  2161   000A2C  EF1C  F005         	goto	l2509
  2162   000A30                     u2200:
  2163   000A30  0E02               	movlw	2
  2164   000A32  6E33               	movwf	_cardType^0,c	;volatile
  2165   000A34  EF1E  F005         	goto	l2511
  2166   000A38                     l2509:
  2167   000A38  0E03               	movlw	3
  2168   000A3A  6E33               	movwf	_cardType^0,c	;volatile
  2169   000A3C                     l2511:
  2170                           
  2171                           ;sd_routines.c: 92:     return 0;
  2172   000A3C  0E00               	movlw	0
  2173   000A3E                     l206:
  2174   000A3E  0012               	return		;funcret
  2175   000A40                     __end_of_SD_init:
  2176                           	callstack 0
  2177                           
  2178 ;; *************** function _UART_Init *****************
  2179 ;; Defined at:
  2180 ;;		line 123 in file "main.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;		None
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;		None
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  1    wreg      void 
  2187 ;; Registers used:
  2188 ;;		wreg, status,2
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2194 ;;      Params:         0       0       0       0       0       0       0
  2195 ;;      Locals:         0       0       0       0       0       0       0
  2196 ;;      Temps:          0       0       0       0       0       0       0
  2197 ;;      Totals:         0       0       0       0       0       0       0
  2198 ;;Total ram usage:        0 bytes
  2199 ;; Hardware stack levels used: 1
  2200 ;; Hardware stack levels required when called: 3
  2201 ;; This function calls:
  2202 ;;		Nothing
  2203 ;; This function is called by:
  2204 ;;		_init
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text9
  2209   0011CA                     __ptext9:
  2210                           	callstack 0
  2211   0011CA                     _UART_Init:
  2212                           	callstack 26
  2213   0011CA                     
  2214                           ;main.c: 125:     TRISCbits.RC6 = 1;
  2215   0011CA  8C94               	bsf	148,6,c	;volatile
  2216                           
  2217                           ;main.c: 126:     TRISCbits.RC7 = 1;
  2218   0011CC  8E94               	bsf	148,7,c	;volatile
  2219   0011CE                     
  2220                           ;main.c: 128:     SPBRG = 49;
  2221   0011CE  0E31               	movlw	49
  2222   0011D0  6EAF               	movwf	175,c	;volatile
  2223   0011D2                     
  2224                           ;main.c: 129:     SPBRGH = 0x00;
  2225   0011D2  6AB0               	clrf	176,c	;volatile
  2226   0011D4                     
  2227                           ;main.c: 130:     TXSTAbits.CSRC = 0;
  2228   0011D4  9EAC               	bcf	172,7,c	;volatile
  2229   0011D6                     
  2230                           ;main.c: 131:     TXSTAbits.TX9 = 0;
  2231   0011D6  9CAC               	bcf	172,6,c	;volatile
  2232   0011D8                     
  2233                           ;main.c: 132:     TXSTAbits.TXEN = 1;
  2234   0011D8  8AAC               	bsf	172,5,c	;volatile
  2235   0011DA                     
  2236                           ;main.c: 133:     TXSTAbits.SYNC = 0;
  2237   0011DA  98AC               	bcf	172,4,c	;volatile
  2238   0011DC                     
  2239                           ;main.c: 134:     TXSTAbits.BRGH = 1;
  2240   0011DC  84AC               	bsf	172,2,c	;volatile
  2241   0011DE                     
  2242                           ;main.c: 135:     BAUDCONbits.BRG16 = 1;
  2243   0011DE  86B8               	bsf	184,3,c	;volatile
  2244                           
  2245                           ;main.c: 136:     RCSTA = 0x90;
  2246   0011E0  0E90               	movlw	144
  2247   0011E2  6EAB               	movwf	171,c	;volatile
  2248   0011E4  0012               	return		;funcret
  2249   0011E6                     __end_of_UART_Init:
  2250                           	callstack 0
  2251                           
  2252 ;; *************** function _SD_writeSingleBlock *****************
  2253 ;; Defined at:
  2254 ;;		line 225 in file "sd_routines.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;  startBlock      4   31[COMRAM] unsigned long 
  2257 ;;  Buffer1         2   35[COMRAM] PTR unsigned char 
  2258 ;;		 -> Buffer1(512), Buffer2(512), 
  2259 ;; Auto vars:     Size  Location     Type
  2260 ;;  i               2   40[COMRAM] unsigned int 
  2261 ;;  retry           2   37[COMRAM] unsigned int 
  2262 ;;  response        1   39[COMRAM] unsigned char 
  2263 ;; Return value:  Size  Location     Type
  2264 ;;                  1    wreg      unsigned char 
  2265 ;; Registers used:
  2266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2267 ;; Tracked objects:
  2268 ;;		On entry : 0/0
  2269 ;;		On exit  : 0/0
  2270 ;;		Unchanged: 0/0
  2271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2272 ;;      Params:         6       0       0       0       0       0       0
  2273 ;;      Locals:         5       0       0       0       0       0       0
  2274 ;;      Temps:          0       0       0       0       0       0       0
  2275 ;;      Totals:        11       0       0       0       0       0       0
  2276 ;;Total ram usage:       11 bytes
  2277 ;; Hardware stack levels used: 1
  2278 ;; Hardware stack levels required when called: 6
  2279 ;; This function calls:
  2280 ;;		_SD_sendCommand
  2281 ;;		_SPI1_Read
  2282 ;;		_SPI1_Write
  2283 ;; This function is called by:
  2284 ;;		_main
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text10
  2289   000D56                     __ptext10:
  2290                           	callstack 0
  2291   000D56                     _SD_writeSingleBlock:
  2292                           	callstack 24
  2293   000D56                     
  2294                           ;sd_routines.c: 226:     unsigned char response;;sd_routines.c: 227:     unsigned int i,
      +                           retry = 0;
  2295   000D56  0E00               	movlw	0
  2296   000D58  6E61               	movwf	(SD_writeSingleBlock@retry+1)^0,c
  2297   000D5A  0E00               	movlw	0
  2298   000D5C  6E60               	movwf	SD_writeSingleBlock@retry^0,c
  2299   000D5E                     
  2300                           ;sd_routines.c: 229:     response = SD_sendCommand(24, startBlock);
  2301   000D5E  C05A  F04E         	movff	SD_writeSingleBlock@startBlock,SD_sendCommand@arg
  2302   000D62  C05B  F04F         	movff	SD_writeSingleBlock@startBlock+1,SD_sendCommand@arg+1
  2303   000D66  C05C  F050         	movff	SD_writeSingleBlock@startBlock+2,SD_sendCommand@arg+2
  2304   000D6A  C05D  F051         	movff	SD_writeSingleBlock@startBlock+3,SD_sendCommand@arg+3
  2305   000D6E  0E18               	movlw	24
  2306   000D70  ECEA  F005         	call	_SD_sendCommand
  2307   000D74  6E62               	movwf	SD_writeSingleBlock@response^0,c
  2308   000D76                     
  2309                           ;sd_routines.c: 231:     if (response != 0x00) return response;
  2310   000D76  5062               	movf	SD_writeSingleBlock@response^0,w,c
  2311   000D78  B4D8               	btfsc	status,2,c
  2312   000D7A  EFC1  F006         	goto	u2271
  2313   000D7E  EFC3  F006         	goto	u2270
  2314   000D82                     u2271:
  2315   000D82  EFC5  F006         	goto	l2601
  2316   000D86                     u2270:
  2317   000D86  EF31  F007         	goto	l255
  2318   000D8A                     l2601:
  2319                           
  2320                           ;sd_routines.c: 233:     PORTC &= 0xFE;
  2321   000D8A  9082               	bcf	130,0,c	;volatile
  2322   000D8C                     
  2323                           ;sd_routines.c: 235:     SPI1_Write(0xfe);
  2324   000D8C  0EFE               	movlw	254
  2325   000D8E  EC03  F009         	call	_SPI1_Write
  2326   000D92                     
  2327                           ;sd_routines.c: 236:     for (i = 0; i < 512; i++)
  2328   000D92  0E00               	movlw	0
  2329   000D94  6E64               	movwf	(SD_writeSingleBlock@i+1)^0,c
  2330   000D96  0E00               	movlw	0
  2331   000D98  6E63               	movwf	SD_writeSingleBlock@i^0,c
  2332   000D9A                     l2611:
  2333                           
  2334                           ;sd_routines.c: 237:         SPI1_Write(Buffer1[i]);
  2335   000D9A  5063               	movf	SD_writeSingleBlock@i^0,w,c
  2336   000D9C  245E               	addwf	SD_writeSingleBlock@Buffer1^0,w,c
  2337   000D9E  6ED9               	movwf	fsr2l,c
  2338   000DA0  5064               	movf	(SD_writeSingleBlock@i+1)^0,w,c
  2339   000DA2  205F               	addwfc	(SD_writeSingleBlock@Buffer1+1)^0,w,c
  2340   000DA4  6EDA               	movwf	fsr2h,c
  2341   000DA6  50DF               	movf	indf2,w,c
  2342   000DA8  EC03  F009         	call	_SPI1_Write
  2343   000DAC  4A63               	infsnz	SD_writeSingleBlock@i^0,f,c
  2344   000DAE  2A64               	incf	(SD_writeSingleBlock@i+1)^0,f,c
  2345   000DB0  0E02               	movlw	2
  2346   000DB2  5C64               	subwf	(SD_writeSingleBlock@i+1)^0,w,c
  2347   000DB4  A0D8               	btfss	status,0,c
  2348   000DB6  EFDF  F006         	goto	u2281
  2349   000DBA  EFE1  F006         	goto	u2280
  2350   000DBE                     u2281:
  2351   000DBE  EFCD  F006         	goto	l2611
  2352   000DC2                     u2280:
  2353   000DC2                     
  2354                           ;sd_routines.c: 239:     SPI1_Write(0xFF);
  2355   000DC2  0EFF               	movlw	255
  2356   000DC4  EC03  F009         	call	_SPI1_Write
  2357                           
  2358                           ;sd_routines.c: 240:     SPI1_Write(0xFF);
  2359   000DC8  0EFF               	movlw	255
  2360   000DCA  EC03  F009         	call	_SPI1_Write
  2361   000DCE                     
  2362                           ;sd_routines.c: 242:     response = SPI1_Read(0xFF);
  2363   000DCE  0EFF               	movlw	255
  2364   000DD0  EC0A  F009         	call	_SPI1_Read
  2365   000DD4  6E62               	movwf	SD_writeSingleBlock@response^0,c
  2366   000DD6                     
  2367                           ;sd_routines.c: 243:     if ((response & 0x1f) != 0x05)
  2368   000DD6  5062               	movf	SD_writeSingleBlock@response^0,w,c
  2369   000DD8  0B1F               	andlw	31
  2370   000DDA  0A05               	xorlw	5
  2371   000DDC  B4D8               	btfsc	status,2,c
  2372   000DDE  EFF3  F006         	goto	u2291
  2373   000DE2  EFF5  F006         	goto	u2290
  2374   000DE6                     u2291:
  2375   000DE6  EF05  F007         	goto	l2633
  2376   000DEA                     u2290:
  2377   000DEA                     l2623:
  2378                           
  2379                           ;sd_routines.c: 245:     {;sd_routines.c: 246:         PORTC |= 0x01;
  2380   000DEA  8082               	bsf	130,0,c	;volatile
  2381   000DEC  EF31  F007         	goto	l255
  2382   000DF0                     l2627:
  2383                           
  2384                           ;sd_routines.c: 251:         if ((retry++) > 0xFFfe) {
  2385   000DF0  4A60               	infsnz	SD_writeSingleBlock@retry^0,f,c
  2386   000DF2  2A61               	incf	(SD_writeSingleBlock@retry+1)^0,f,c
  2387   000DF4  5060               	movf	SD_writeSingleBlock@retry^0,w,c
  2388   000DF6  1061               	iorwf	(SD_writeSingleBlock@retry+1)^0,w,c
  2389   000DF8  A4D8               	btfss	status,2,c
  2390   000DFA  EF01  F007         	goto	u2301
  2391   000DFE  EF03  F007         	goto	u2300
  2392   000E02                     u2301:
  2393   000E02  EF05  F007         	goto	l2633
  2394   000E06                     u2300:
  2395   000E06  EFF5  F006         	goto	l2623
  2396   000E0A                     l2633:
  2397                           
  2398                           ;sd_routines.c: 250:     while (!SPI1_Read(0xFF))
  2399   000E0A  0EFF               	movlw	255
  2400   000E0C  EC0A  F009         	call	_SPI1_Read
  2401   000E10  0900               	iorlw	0
  2402   000E12  B4D8               	btfsc	status,2,c
  2403   000E14  EF0E  F007         	goto	u2311
  2404   000E18  EF10  F007         	goto	u2310
  2405   000E1C                     u2311:
  2406   000E1C  EFF8  F006         	goto	l2627
  2407   000E20                     u2310:
  2408   000E20                     
  2409                           ;sd_routines.c: 256:     PORTC |= 0x01;
  2410   000E20  8082               	bsf	130,0,c	;volatile
  2411   000E22                     
  2412                           ;sd_routines.c: 257:     SPI1_Write(0xFF);
  2413   000E22  0EFF               	movlw	255
  2414   000E24  EC03  F009         	call	_SPI1_Write
  2415   000E28                     
  2416                           ;sd_routines.c: 258:     PORTC &= 0xFE;
  2417   000E28  9082               	bcf	130,0,c	;volatile
  2418                           
  2419                           ;sd_routines.c: 260:     while (!SPI1_Read(0xFF))
  2420   000E2A  EF24  F007         	goto	l2647
  2421   000E2E                     l2641:
  2422                           
  2423                           ;sd_routines.c: 261:         if (retry++ > 0xFFfe) {
  2424   000E2E  4A60               	infsnz	SD_writeSingleBlock@retry^0,f,c
  2425   000E30  2A61               	incf	(SD_writeSingleBlock@retry+1)^0,f,c
  2426   000E32  5060               	movf	SD_writeSingleBlock@retry^0,w,c
  2427   000E34  1061               	iorwf	(SD_writeSingleBlock@retry+1)^0,w,c
  2428   000E36  A4D8               	btfss	status,2,c
  2429   000E38  EF20  F007         	goto	u2321
  2430   000E3C  EF22  F007         	goto	u2320
  2431   000E40                     u2321:
  2432   000E40  EF24  F007         	goto	l2647
  2433   000E44                     u2320:
  2434   000E44  EFF5  F006         	goto	l2623
  2435   000E48                     l2647:
  2436                           
  2437                           ;sd_routines.c: 260:     while (!SPI1_Read(0xFF))
  2438   000E48  0EFF               	movlw	255
  2439   000E4A  EC0A  F009         	call	_SPI1_Read
  2440   000E4E  0900               	iorlw	0
  2441   000E50  B4D8               	btfsc	status,2,c
  2442   000E52  EF2D  F007         	goto	u2331
  2443   000E56  EF2F  F007         	goto	u2330
  2444   000E5A                     u2331:
  2445   000E5A  EF17  F007         	goto	l2641
  2446   000E5E                     u2330:
  2447   000E5E  EFF5  F006         	goto	l2623
  2448   000E62                     l255:
  2449   000E62  0012               	return		;funcret
  2450   000E64                     __end_of_SD_writeSingleBlock:
  2451                           	callstack 0
  2452                           
  2453 ;; *************** function _SD_readSingleBlock *****************
  2454 ;; Defined at:
  2455 ;;		line 188 in file "sd_routines.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  startBlock      4   31[COMRAM] unsigned long 
  2458 ;;  Buffer1         2   35[COMRAM] PTR unsigned char 
  2459 ;;		 -> Buffer1(512), 
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;  i               2   40[COMRAM] unsigned int 
  2462 ;;  retry           2   37[COMRAM] unsigned int 
  2463 ;;  response        1   39[COMRAM] unsigned char 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  1    wreg      unsigned char 
  2466 ;; Registers used:
  2467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2473 ;;      Params:         6       0       0       0       0       0       0
  2474 ;;      Locals:         5       0       0       0       0       0       0
  2475 ;;      Temps:          0       0       0       0       0       0       0
  2476 ;;      Totals:        11       0       0       0       0       0       0
  2477 ;;Total ram usage:       11 bytes
  2478 ;; Hardware stack levels used: 1
  2479 ;; Hardware stack levels required when called: 6
  2480 ;; This function calls:
  2481 ;;		_SD_sendCommand
  2482 ;;		_SPI1_Read
  2483 ;; This function is called by:
  2484 ;;		_main
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text11
  2489   000E64                     __ptext11:
  2490                           	callstack 0
  2491   000E64                     _SD_readSingleBlock:
  2492                           	callstack 24
  2493   000E64                     
  2494                           ;sd_routines.c: 192:     response = SD_sendCommand(17, startBlock);
  2495   000E64  C05A  F04E         	movff	SD_readSingleBlock@startBlock,SD_sendCommand@arg
  2496   000E68  C05B  F04F         	movff	SD_readSingleBlock@startBlock+1,SD_sendCommand@arg+1
  2497   000E6C  C05C  F050         	movff	SD_readSingleBlock@startBlock+2,SD_sendCommand@arg+2
  2498   000E70  C05D  F051         	movff	SD_readSingleBlock@startBlock+3,SD_sendCommand@arg+3
  2499   000E74  0E11               	movlw	17
  2500   000E76  ECEA  F005         	call	_SD_sendCommand
  2501   000E7A  6E62               	movwf	SD_readSingleBlock@response^0,c
  2502   000E7C                     
  2503                           ;sd_routines.c: 195:     if (response != 0x00) return response;
  2504   000E7C  5062               	movf	SD_readSingleBlock@response^0,w,c
  2505   000E7E  B4D8               	btfsc	status,2,c
  2506   000E80  EF44  F007         	goto	u2341
  2507   000E84  EF46  F007         	goto	u2340
  2508   000E88                     u2341:
  2509   000E88  EF48  F007         	goto	l2661
  2510   000E8C                     u2340:
  2511   000E8C  EF8C  F007         	goto	l245
  2512   000E90                     l2661:
  2513                           
  2514                           ;sd_routines.c: 197:     PORTC &= 0xFE;
  2515   000E90  9082               	bcf	130,0,c	;volatile
  2516   000E92                     
  2517                           ;sd_routines.c: 199:     retry = 0;
  2518   000E92  0E00               	movlw	0
  2519   000E94  6E61               	movwf	(SD_readSingleBlock@retry+1)^0,c
  2520   000E96  0E00               	movlw	0
  2521   000E98  6E60               	movwf	SD_readSingleBlock@retry^0,c
  2522                           
  2523                           ;sd_routines.c: 200:     while (SPI1_Read(0xFF) != 0xfe)
  2524   000E9A  EF5D  F007         	goto	l2671
  2525   000E9E                     l2665:
  2526                           
  2527                           ;sd_routines.c: 201:         if (retry++ > 0xFFfe) {
  2528   000E9E  4A60               	infsnz	SD_readSingleBlock@retry^0,f,c
  2529   000EA0  2A61               	incf	(SD_readSingleBlock@retry+1)^0,f,c
  2530   000EA2  5060               	movf	SD_readSingleBlock@retry^0,w,c
  2531   000EA4  1061               	iorwf	(SD_readSingleBlock@retry+1)^0,w,c
  2532   000EA6  A4D8               	btfss	status,2,c
  2533   000EA8  EF58  F007         	goto	u2351
  2534   000EAC  EF5A  F007         	goto	u2350
  2535   000EB0                     u2351:
  2536   000EB0  EF5D  F007         	goto	l2671
  2537   000EB4                     u2350:
  2538   000EB4                     l2667:
  2539                           
  2540                           ;sd_routines.c: 202:             PORTC |= 0x01;
  2541   000EB4  8082               	bsf	130,0,c	;volatile
  2542   000EB6  EF8C  F007         	goto	l245
  2543   000EBA                     l2671:
  2544                           
  2545                           ;sd_routines.c: 200:     while (SPI1_Read(0xFF) != 0xfe)
  2546   000EBA  0EFF               	movlw	255
  2547   000EBC  EC0A  F009         	call	_SPI1_Read
  2548   000EC0  0AFE               	xorlw	254
  2549   000EC2  A4D8               	btfss	status,2,c
  2550   000EC4  EF66  F007         	goto	u2361
  2551   000EC8  EF68  F007         	goto	u2360
  2552   000ECC                     u2361:
  2553   000ECC  EF4F  F007         	goto	l2665
  2554   000ED0                     u2360:
  2555   000ED0                     
  2556                           ;sd_routines.c: 206:     for (i = 0; i < 512; i++)
  2557   000ED0  0E00               	movlw	0
  2558   000ED2  6E64               	movwf	(SD_readSingleBlock@i+1)^0,c
  2559   000ED4  0E00               	movlw	0
  2560   000ED6  6E63               	movwf	SD_readSingleBlock@i^0,c
  2561   000ED8                     l2679:
  2562                           
  2563                           ;sd_routines.c: 207:         Buffer1[i] = SPI1_Read(0xFF);
  2564   000ED8  5063               	movf	SD_readSingleBlock@i^0,w,c
  2565   000EDA  245E               	addwf	SD_readSingleBlock@Buffer1^0,w,c
  2566   000EDC  6ED9               	movwf	fsr2l,c
  2567   000EDE  5064               	movf	(SD_readSingleBlock@i+1)^0,w,c
  2568   000EE0  205F               	addwfc	(SD_readSingleBlock@Buffer1+1)^0,w,c
  2569   000EE2  6EDA               	movwf	fsr2h,c
  2570   000EE4  0EFF               	movlw	255
  2571   000EE6  EC0A  F009         	call	_SPI1_Read
  2572   000EEA  6EDF               	movwf	indf2,c
  2573   000EEC  4A63               	infsnz	SD_readSingleBlock@i^0,f,c
  2574   000EEE  2A64               	incf	(SD_readSingleBlock@i+1)^0,f,c
  2575   000EF0  0E02               	movlw	2
  2576   000EF2  5C64               	subwf	(SD_readSingleBlock@i+1)^0,w,c
  2577   000EF4  A0D8               	btfss	status,0,c
  2578   000EF6  EF7F  F007         	goto	u2371
  2579   000EFA  EF81  F007         	goto	u2370
  2580   000EFE                     u2371:
  2581   000EFE  EF6C  F007         	goto	l2679
  2582   000F02                     u2370:
  2583   000F02                     
  2584                           ;sd_routines.c: 209:     SPI1_Read(0xFF);
  2585   000F02  0EFF               	movlw	255
  2586   000F04  EC0A  F009         	call	_SPI1_Read
  2587                           
  2588                           ;sd_routines.c: 210:     SPI1_Read(0xFF);
  2589   000F08  0EFF               	movlw	255
  2590   000F0A  EC0A  F009         	call	_SPI1_Read
  2591                           
  2592                           ;sd_routines.c: 212:     SPI1_Read(0xFF);
  2593   000F0E  0EFF               	movlw	255
  2594   000F10  EC0A  F009         	call	_SPI1_Read
  2595   000F14  EF5A  F007         	goto	l2667
  2596   000F18                     l245:
  2597   000F18  0012               	return		;funcret
  2598   000F1A                     __end_of_SD_readSingleBlock:
  2599                           	callstack 0
  2600                           
  2601 ;; *************** function _SD_sendCommand *****************
  2602 ;; Defined at:
  2603 ;;		line 102 in file "sd_routines.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;  cmd             1    wreg     unsigned char 
  2606 ;;  arg             4   19[COMRAM] unsigned long 
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;  cmd             1   30[COMRAM] unsigned char 
  2609 ;;  response        1   29[COMRAM] unsigned char 
  2610 ;;  status1         1   28[COMRAM] unsigned char 
  2611 ;;  retry           1   27[COMRAM] unsigned char 
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      unsigned char 
  2614 ;; Registers used:
  2615 ;;		wreg, status,2, status,0, cstack
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2621 ;;      Params:         4       0       0       0       0       0       0
  2622 ;;      Locals:         4       0       0       0       0       0       0
  2623 ;;      Temps:          4       0       0       0       0       0       0
  2624 ;;      Totals:        12       0       0       0       0       0       0
  2625 ;;Total ram usage:       12 bytes
  2626 ;; Hardware stack levels used: 1
  2627 ;; Hardware stack levels required when called: 5
  2628 ;; This function calls:
  2629 ;;		_SPI1_Read
  2630 ;;		_SPI1_Write
  2631 ;; This function is called by:
  2632 ;;		_SD_init
  2633 ;;		_SD_readSingleBlock
  2634 ;;		_SD_writeSingleBlock
  2635 ;;		_SD_erase
  2636 ;;		_SD_readMultipleBlock
  2637 ;;		_SD_writeMultipleBlock
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           	psect	text12
  2642   000BD4                     __ptext12:
  2643                           	callstack 0
  2644   000BD4                     _SD_sendCommand:
  2645                           	callstack 22
  2646                           
  2647                           ;incstack = 0
  2648                           ;SD_sendCommand@cmd stored from wreg
  2649   000BD4  6E59               	movwf	SD_sendCommand@cmd^0,c
  2650   000BD6                     
  2651                           ;sd_routines.c: 103:     unsigned char response, retry, status1;;sd_routines.c: 104:    
      +                           retry = 0;
  2652   000BD6  6A56               	clrf	SD_sendCommand@retry^0,c
  2653   000BD8                     
  2654                           ;sd_routines.c: 111:     if (SDHC_flag == 0)
  2655   000BD8  5034               	movf	_SDHC_flag^0,w,c	;volatile
  2656   000BDA  A4D8               	btfss	status,2,c
  2657   000BDC  EFF2  F005         	goto	u1971
  2658   000BE0  EFF4  F005         	goto	u1970
  2659   000BE4                     u1971:
  2660   000BE4  EF43  F006         	goto	l2383
  2661   000BE8                     u1970:
  2662   000BE8                     
  2663                           ;sd_routines.c: 112:         if ((cmd == 17) ||
  2664   000BE8  0E11               	movlw	17
  2665   000BEA  1859               	xorwf	SD_sendCommand@cmd^0,w,c
  2666   000BEC  B4D8               	btfsc	status,2,c
  2667   000BEE  EFFB  F005         	goto	u1981
  2668   000BF2  EFFD  F005         	goto	u1980
  2669   000BF6                     u1981:
  2670   000BF6  EF2A  F006         	goto	l2381
  2671   000BFA                     u1980:
  2672   000BFA  0E12               	movlw	18
  2673   000BFC  1859               	xorwf	SD_sendCommand@cmd^0,w,c
  2674   000BFE  B4D8               	btfsc	status,2,c
  2675   000C00  EF04  F006         	goto	u1991
  2676   000C04  EF06  F006         	goto	u1990
  2677   000C08                     u1991:
  2678   000C08  EF2A  F006         	goto	l2381
  2679   000C0C                     u1990:
  2680   000C0C  0E18               	movlw	24
  2681   000C0E  1859               	xorwf	SD_sendCommand@cmd^0,w,c
  2682   000C10  B4D8               	btfsc	status,2,c
  2683   000C12  EF0D  F006         	goto	u2001
  2684   000C16  EF0F  F006         	goto	u2000
  2685   000C1A                     u2001:
  2686   000C1A  EF2A  F006         	goto	l2381
  2687   000C1E                     u2000:
  2688   000C1E  0E19               	movlw	25
  2689   000C20  1859               	xorwf	SD_sendCommand@cmd^0,w,c
  2690   000C22  B4D8               	btfsc	status,2,c
  2691   000C24  EF16  F006         	goto	u2011
  2692   000C28  EF18  F006         	goto	u2010
  2693   000C2C                     u2011:
  2694   000C2C  EF2A  F006         	goto	l2381
  2695   000C30                     u2010:
  2696   000C30  0E20               	movlw	32
  2697   000C32  1859               	xorwf	SD_sendCommand@cmd^0,w,c
  2698   000C34  B4D8               	btfsc	status,2,c
  2699   000C36  EF1F  F006         	goto	u2021
  2700   000C3A  EF21  F006         	goto	u2020
  2701   000C3E                     u2021:
  2702   000C3E  EF2A  F006         	goto	l2381
  2703   000C42                     u2020:
  2704   000C42  0E21               	movlw	33
  2705   000C44  1859               	xorwf	SD_sendCommand@cmd^0,w,c
  2706   000C46  A4D8               	btfss	status,2,c
  2707   000C48  EF28  F006         	goto	u2031
  2708   000C4C  EF2A  F006         	goto	u2030
  2709   000C50                     u2031:
  2710   000C50  EF43  F006         	goto	l2383
  2711   000C54                     u2030:
  2712   000C54                     l2381:
  2713                           
  2714                           ;sd_routines.c: 117:                 (cmd == 33)) {;sd_routines.c: 118:             arg 
      +                          = (arg << 9);
  2715   000C54  C04E  F052         	movff	SD_sendCommand@arg,??_SD_sendCommand
  2716   000C58  C04F  F053         	movff	SD_sendCommand@arg+1,??_SD_sendCommand+1
  2717   000C5C  C050  F054         	movff	SD_sendCommand@arg+2,??_SD_sendCommand+2
  2718   000C60  C051  F055         	movff	SD_sendCommand@arg+3,??_SD_sendCommand+3
  2719   000C64  0E09               	movlw	9
  2720   000C66                     u2045:
  2721   000C66  90D8               	bcf	status,0,c
  2722   000C68  3652               	rlcf	??_SD_sendCommand^0,f,c
  2723   000C6A  3653               	rlcf	(??_SD_sendCommand+1)^0,f,c
  2724   000C6C  3654               	rlcf	(??_SD_sendCommand+2)^0,f,c
  2725   000C6E  3655               	rlcf	(??_SD_sendCommand+3)^0,f,c
  2726   000C70  2EE8               	decfsz	wreg,f,c
  2727   000C72  EF33  F006         	goto	u2045
  2728   000C76  C052  F04E         	movff	??_SD_sendCommand,SD_sendCommand@arg
  2729   000C7A  C053  F04F         	movff	??_SD_sendCommand+1,SD_sendCommand@arg+1
  2730   000C7E  C054  F050         	movff	??_SD_sendCommand+2,SD_sendCommand@arg+2
  2731   000C82  C055  F051         	movff	??_SD_sendCommand+3,SD_sendCommand@arg+3
  2732   000C86                     l2383:
  2733                           
  2734                           ;sd_routines.c: 120:     PORTC &= 0xFE;
  2735   000C86  9082               	bcf	130,0,c	;volatile
  2736   000C88                     
  2737                           ;sd_routines.c: 122:     SPI1_Write(cmd | 0x40);
  2738   000C88  5059               	movf	SD_sendCommand@cmd^0,w,c
  2739   000C8A  0940               	iorlw	64
  2740   000C8C  EC03  F009         	call	_SPI1_Write
  2741   000C90                     
  2742                           ;sd_routines.c: 123:     SPI1_Write(arg >> 24);
  2743   000C90  5051               	movf	(SD_sendCommand@arg+3)^0,w,c
  2744   000C92  EC03  F009         	call	_SPI1_Write
  2745   000C96                     
  2746                           ;sd_routines.c: 124:     SPI1_Write(arg >> 16);
  2747   000C96  5050               	movf	(SD_sendCommand@arg+2)^0,w,c
  2748   000C98  EC03  F009         	call	_SPI1_Write
  2749   000C9C                     
  2750                           ;sd_routines.c: 125:     SPI1_Write(arg >> 8);
  2751   000C9C  504F               	movf	(SD_sendCommand@arg+1)^0,w,c
  2752   000C9E  EC03  F009         	call	_SPI1_Write
  2753   000CA2                     
  2754                           ;sd_routines.c: 126:     SPI1_Write(arg);
  2755   000CA2  504E               	movf	SD_sendCommand@arg^0,w,c
  2756   000CA4  EC03  F009         	call	_SPI1_Write
  2757   000CA8                     
  2758                           ;sd_routines.c: 128:     if (cmd == 8)
  2759   000CA8  0E08               	movlw	8
  2760   000CAA  1859               	xorwf	SD_sendCommand@cmd^0,w,c
  2761   000CAC  A4D8               	btfss	status,2,c
  2762   000CAE  EF5B  F006         	goto	u2051
  2763   000CB2  EF5D  F006         	goto	u2050
  2764   000CB6                     u2051:
  2765   000CB6  EF62  F006         	goto	l2399
  2766   000CBA                     u2050:
  2767   000CBA                     
  2768                           ;sd_routines.c: 129:         SPI1_Write(0x87);
  2769   000CBA  0E87               	movlw	135
  2770   000CBC  EC03  F009         	call	_SPI1_Write
  2771   000CC0  EF6C  F006         	goto	l2403
  2772   000CC4                     l2399:
  2773                           
  2774                           ;sd_routines.c: 131:         SPI1_Write(0x95);
  2775   000CC4  0E95               	movlw	149
  2776   000CC6  EC03  F009         	call	_SPI1_Write
  2777   000CCA  EF6C  F006         	goto	l2403
  2778   000CCE                     l229:
  2779                           
  2780                           ;sd_routines.c: 134:         if (retry++ > 0xfe) break;
  2781   000CCE  3E56               	incfsz	SD_sendCommand@retry^0,f,c
  2782   000CD0  EF6C  F006         	goto	l2403
  2783   000CD4  EF78  F006         	goto	l2405
  2784   000CD8                     l2403:
  2785                           
  2786                           ;sd_routines.c: 133:     while ((response = SPI1_Read(0xFF)) == 0xFF)
  2787   000CD8  0EFF               	movlw	255
  2788   000CDA  EC0A  F009         	call	_SPI1_Read
  2789   000CDE  6E58               	movwf	SD_sendCommand@response^0,c
  2790   000CE0  2858               	incf	SD_sendCommand@response^0,w,c
  2791   000CE2  B4D8               	btfsc	status,2,c
  2792   000CE4  EF76  F006         	goto	u2061
  2793   000CE8  EF78  F006         	goto	u2060
  2794   000CEC                     u2061:
  2795   000CEC  EF67  F006         	goto	l229
  2796   000CF0                     u2060:
  2797   000CF0                     l2405:
  2798                           
  2799                           ;sd_routines.c: 136:     if ((response == 0x00) && (cmd == 58))
  2800   000CF0  5058               	movf	SD_sendCommand@response^0,w,c
  2801   000CF2  A4D8               	btfss	status,2,c
  2802   000CF4  EF7E  F006         	goto	u2071
  2803   000CF8  EF80  F006         	goto	u2070
  2804   000CFC                     u2071:
  2805   000CFC  EFA5  F006         	goto	l232
  2806   000D00                     u2070:
  2807   000D00  0E3A               	movlw	58
  2808   000D02  1859               	xorwf	SD_sendCommand@cmd^0,w,c
  2809   000D04  A4D8               	btfss	status,2,c
  2810   000D06  EF87  F006         	goto	u2081
  2811   000D0A  EF89  F006         	goto	u2080
  2812   000D0E                     u2081:
  2813   000D0E  EFA5  F006         	goto	l232
  2814   000D12                     u2080:
  2815   000D12                     
  2816                           ;sd_routines.c: 137:     {;sd_routines.c: 138:         status1 = (SPI1_Read(0xFF) & 0x40
      +                          );
  2817   000D12  0EFF               	movlw	255
  2818   000D14  EC0A  F009         	call	_SPI1_Read
  2819   000D18  0B40               	andlw	64
  2820   000D1A  6E57               	movwf	SD_sendCommand@status1^0,c
  2821   000D1C                     
  2822                           ;sd_routines.c: 139:         if (status1 == 0x40) SDHC_flag = 1;
  2823   000D1C  0E40               	movlw	64
  2824   000D1E  1857               	xorwf	SD_sendCommand@status1^0,w,c
  2825   000D20  A4D8               	btfss	status,2,c
  2826   000D22  EF95  F006         	goto	u2091
  2827   000D26  EF97  F006         	goto	u2090
  2828   000D2A                     u2091:
  2829   000D2A  EF9B  F006         	goto	l233
  2830   000D2E                     u2090:
  2831   000D2E  0E01               	movlw	1
  2832   000D30  6E34               	movwf	_SDHC_flag^0,c	;volatile
  2833   000D32  EF9C  F006         	goto	l2415
  2834   000D36                     l233:
  2835   000D36  6A34               	clrf	_SDHC_flag^0,c	;volatile
  2836   000D38                     l2415:
  2837                           
  2838                           ;sd_routines.c: 142:         SPI1_Read(0xFF);
  2839   000D38  0EFF               	movlw	255
  2840   000D3A  EC0A  F009         	call	_SPI1_Read
  2841                           
  2842                           ;sd_routines.c: 143:         SPI1_Read(0xFF);
  2843   000D3E  0EFF               	movlw	255
  2844   000D40  EC0A  F009         	call	_SPI1_Read
  2845                           
  2846                           ;sd_routines.c: 144:         SPI1_Read(0xFF);
  2847   000D44  0EFF               	movlw	255
  2848   000D46  EC0A  F009         	call	_SPI1_Read
  2849   000D4A                     l232:
  2850                           
  2851                           ;sd_routines.c: 147:     SPI1_Read(0xFF);
  2852   000D4A  0EFF               	movlw	255
  2853   000D4C  EC0A  F009         	call	_SPI1_Read
  2854   000D50                     
  2855                           ;sd_routines.c: 148:     PORTC |= 0x01;
  2856   000D50  8082               	bsf	130,0,c	;volatile
  2857   000D52                     
  2858                           ;sd_routines.c: 150:     return response;
  2859   000D52  5058               	movf	SD_sendCommand@response^0,w,c
  2860   000D54  0012               	return		;funcret
  2861   000D56                     __end_of_SD_sendCommand:
  2862                           	callstack 0
  2863                           
  2864 ;; *************** function _SPI1_Write *****************
  2865 ;; Defined at:
  2866 ;;		line 49 in file "spi.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  dat             1    wreg     unsigned char 
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;  dat             1   18[COMRAM] unsigned char 
  2871 ;;  ch              1    0        unsigned char 
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  1    wreg      void 
  2874 ;; Registers used:
  2875 ;;		wreg, cstack
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2881 ;;      Params:         0       0       0       0       0       0       0
  2882 ;;      Locals:         1       0       0       0       0       0       0
  2883 ;;      Temps:          0       0       0       0       0       0       0
  2884 ;;      Totals:         1       0       0       0       0       0       0
  2885 ;;Total ram usage:        1 bytes
  2886 ;; Hardware stack levels used: 1
  2887 ;; Hardware stack levels required when called: 4
  2888 ;; This function calls:
  2889 ;;		_SPI1_ReceiveWait
  2890 ;; This function is called by:
  2891 ;;		_SD_init
  2892 ;;		_SD_sendCommand
  2893 ;;		_SD_writeSingleBlock
  2894 ;;		_SD_writeMultipleBlock
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	text13
  2899   001206                     __ptext13:
  2900                           	callstack 0
  2901   001206                     _SPI1_Write:
  2902                           	callstack 23
  2903                           
  2904                           ;incstack = 0
  2905                           ;SPI1_Write@dat stored from wreg
  2906   001206  6E4D               	movwf	SPI1_Write@dat^0,c
  2907   001208                     
  2908                           ;spi.c: 52:   SSPBUF = dat;
  2909   001208  C04D  FFC9         	movff	SPI1_Write@dat,4041	;volatile
  2910   00120C                     
  2911                           ;spi.c: 53:   SPI1_ReceiveWait();
  2912   00120C  ECFB  F008         	call	_SPI1_ReceiveWait	;wreg free
  2913   001210  50C9               	movf	201,w,c	;volatile
  2914   001212  0012               	return		;funcret
  2915   001214                     __end_of_SPI1_Write:
  2916                           	callstack 0
  2917                           
  2918 ;; *************** function _SPI1_Read *****************
  2919 ;; Defined at:
  2920 ;;		line 41 in file "spi.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;  d               1    wreg     unsigned char 
  2923 ;; Auto vars:     Size  Location     Type
  2924 ;;  d               1   18[COMRAM] unsigned char 
  2925 ;;  ch              1    0        unsigned char 
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  1    wreg      unsigned char 
  2928 ;; Registers used:
  2929 ;;		wreg, status,2, cstack
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2935 ;;      Params:         0       0       0       0       0       0       0
  2936 ;;      Locals:         1       0       0       0       0       0       0
  2937 ;;      Temps:          0       0       0       0       0       0       0
  2938 ;;      Totals:         1       0       0       0       0       0       0
  2939 ;;Total ram usage:        1 bytes
  2940 ;; Hardware stack levels used: 1
  2941 ;; Hardware stack levels required when called: 4
  2942 ;; This function calls:
  2943 ;;		_SPI1_ReceiveWait
  2944 ;; This function is called by:
  2945 ;;		_SD_sendCommand
  2946 ;;		_SD_readSingleBlock
  2947 ;;		_SD_writeSingleBlock
  2948 ;;		_SD_readMultipleBlock
  2949 ;;		_SD_writeMultipleBlock
  2950 ;; This function uses a non-reentrant model
  2951 ;;
  2952                           
  2953                           	psect	text14
  2954   001214                     __ptext14:
  2955                           	callstack 0
  2956   001214                     _SPI1_Read:
  2957                           	callstack 22
  2958                           
  2959                           ;incstack = 0
  2960                           ;SPI1_Read@d stored from wreg
  2961   001214  6E4D               	movwf	SPI1_Read@d^0,c
  2962   001216                     
  2963                           ;spi.c: 44:   SSPBUF = d;
  2964   001216  C04D  FFC9         	movff	SPI1_Read@d,4041	;volatile
  2965   00121A                     
  2966                           ;spi.c: 45:   SPI1_ReceiveWait();
  2967   00121A  ECFB  F008         	call	_SPI1_ReceiveWait	;wreg free
  2968   00121E                     
  2969                           ;spi.c: 46:   return (SSPBUF);
  2970   00121E  50C9               	movf	201,w,c	;volatile
  2971   001220  0012               	return		;funcret
  2972   001222                     __end_of_SPI1_Read:
  2973                           	callstack 0
  2974                           
  2975 ;; *************** function _SPI1_ReceiveWait *****************
  2976 ;; Defined at:
  2977 ;;		line 27 in file "spi.c"
  2978 ;; Parameters:    Size  Location     Type
  2979 ;;		None
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;		None
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		None
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2991 ;;      Params:         0       0       0       0       0       0       0
  2992 ;;      Locals:         0       0       0       0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0       0       0
  2994 ;;      Totals:         0       0       0       0       0       0       0
  2995 ;;Total ram usage:        0 bytes
  2996 ;; Hardware stack levels used: 1
  2997 ;; Hardware stack levels required when called: 3
  2998 ;; This function calls:
  2999 ;;		Nothing
  3000 ;; This function is called by:
  3001 ;;		_SPI1_Read
  3002 ;;		_SPI1_Write
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text15
  3007   0011F6                     __ptext15:
  3008                           	callstack 0
  3009   0011F6                     _SPI1_ReceiveWait:
  3010                           	callstack 23
  3011   0011F6                     l333:
  3012                           
  3013                           ;spi.c: 29:   while (!SSPSTATbits.BF)
  3014   0011F6  A0C7               	btfss	199,0,c	;volatile
  3015   0011F8  EF00  F009         	goto	u1961
  3016   0011FC  EF02  F009         	goto	u1960
  3017   001200                     u1961:
  3018   001200  EFFB  F008         	goto	l333
  3019   001204                     u1960:
  3020   001204  0012               	return		;funcret
  3021   001206                     __end_of_SPI1_ReceiveWait:
  3022                           	callstack 0
  3023                           
  3024 ;; *************** function _ISR *****************
  3025 ;; Defined at:
  3026 ;;		line 282 in file "main.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;		None
  3029 ;; Auto vars:     Size  Location     Type
  3030 ;;		None
  3031 ;; Return value:  Size  Location     Type
  3032 ;;                  1    wreg      void 
  3033 ;; Registers used:
  3034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3035 ;; Tracked objects:
  3036 ;;		On entry : 0/0
  3037 ;;		On exit  : 0/0
  3038 ;;		Unchanged: 0/0
  3039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3040 ;;      Params:         0       0       0       0       0       0       0
  3041 ;;      Locals:         0       0       0       0       0       0       0
  3042 ;;      Temps:          9       0       0       0       0       0       0
  3043 ;;      Totals:         9       0       0       0       0       0       0
  3044 ;;Total ram usage:        9 bytes
  3045 ;; Hardware stack levels used: 1
  3046 ;; Hardware stack levels required when called: 2
  3047 ;; This function calls:
  3048 ;;		_writeBuffer
  3049 ;; This function is called by:
  3050 ;;		Interrupt level 1
  3051 ;; This function uses a non-reentrant model
  3052 ;;
  3053                           
  3054                           	psect	intcodelo
  3055   000018                     __pintcodelo:
  3056                           	callstack 0
  3057   000018                     _ISR:
  3058                           	callstack 22
  3059                           
  3060                           ;incstack = 0
  3061   000018  806A               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  3062   00001A  CFD8 F046          	movff	status,??_ISR+2
  3063   00001E  CFE8 F047          	movff	wreg,??_ISR+3
  3064   000022  CFE0 F048          	movff	bsr,??_ISR+4
  3065   000026  CFD9 F049          	movff	fsr2l,??_ISR+5
  3066   00002A  CFDA F04A          	movff	fsr2h,??_ISR+6
  3067   00002E  CFF3 F04B          	movff	prodl,??_ISR+7
  3068   000032  CFF4 F04C          	movff	prodh,??_ISR+8
  3069   000036                     
  3070                           ;main.c: 284:     if ((PIE1bits.ADIE == 1) && (PIR1bits.ADIF == 1)) {
  3071   000036  AC9D               	btfss	157,6,c	;volatile
  3072   000038  EF20  F000         	goto	i1u145_21
  3073   00003C  EF22  F000         	goto	i1u145_20
  3074   000040                     i1u145_21:
  3075   000040  EF4D  F000         	goto	i1l2069
  3076   000044                     i1u145_20:
  3077   000044  AC9E               	btfss	158,6,c	;volatile
  3078   000046  EF27  F000         	goto	i1u146_21
  3079   00004A  EF29  F000         	goto	i1u146_20
  3080   00004E                     i1u146_21:
  3081   00004E  EF4D  F000         	goto	i1l2069
  3082   000052                     i1u146_20:
  3083   000052                     
  3084                           ;main.c: 285:         PIR1bits.ADIF = 0;
  3085   000052  9C9E               	bcf	158,6,c	;volatile
  3086   000054                     
  3087                           ;main.c: 286:         Result = (ADRESH << 8) + ADRESL;
  3088   000054  50C4               	movf	196,w,c	;volatile
  3089   000056  6E45               	movwf	(??_ISR+1)^0,c
  3090   000058  6A44               	clrf	??_ISR^0,c
  3091   00005A  50C3               	movf	195,w,c	;volatile
  3092   00005C  2444               	addwf	??_ISR^0,w,c
  3093   00005E  6E27               	movwf	_Result^0,c
  3094   000060  0E00               	movlw	0
  3095   000062  2045               	addwfc	(??_ISR+1)^0,w,c
  3096   000064  6E28               	movwf	(_Result+1)^0,c
  3097   000066                     
  3098                           ;main.c: 288:         if (mode_event == 0)
  3099   000066  503A               	movf	_mode_event^0,w,c
  3100   000068  A4D8               	btfss	status,2,c
  3101   00006A  EF39  F000         	goto	i1u147_21
  3102   00006E  EF3B  F000         	goto	i1u147_20
  3103   000072                     i1u147_21:
  3104   000072  EF3F  F000         	goto	i1l2065
  3105   000076                     i1u147_20:
  3106   000076                     
  3107                           ;main.c: 289:             FlagTransmit = 1;
  3108   000076  0E01               	movlw	1
  3109   000078  6E35               	movwf	_FlagTransmit^0,c
  3110   00007A  EF4D  F000         	goto	i1l2069
  3111   00007E                     i1l2065:
  3112   00007E  0438               	decf	_write_event^0,w,c
  3113   000080  A4D8               	btfss	status,2,c
  3114   000082  EF45  F000         	goto	i1u148_21
  3115   000086  EF47  F000         	goto	i1u148_20
  3116   00008A                     i1u148_21:
  3117   00008A  EF4D  F000         	goto	i1l2069
  3118   00008E                     i1u148_20:
  3119   00008E                     
  3120                           ;main.c: 291:             writeBuffer(Result);
  3121   00008E  C027  F03E         	movff	_Result,writeBuffer@Result
  3122   000092  C028  F03F         	movff	_Result+1,writeBuffer@Result+1
  3123   000096  EC20  F005         	call	_writeBuffer	;wreg free
  3124   00009A                     i1l2069:
  3125                           
  3126                           ;main.c: 294:     if (INTCONbits.TMR0IF == 1) {
  3127   00009A  A4F2               	btfss	242,2,c	;volatile
  3128   00009C  EF52  F000         	goto	i1u149_21
  3129   0000A0  EF54  F000         	goto	i1u149_20
  3130   0000A4                     i1u149_21:
  3131   0000A4  EF0B  F001         	goto	i1l165
  3132   0000A8                     i1u149_20:
  3133   0000A8                     
  3134                           ;main.c: 296:         INTCONbits.TMR0IF = 0;
  3135   0000A8  94F2               	bcf	242,2,c	;volatile
  3136                           
  3137                           ;main.c: 297:         ADCON0bits.GO_DONE = 1;
  3138   0000AA  82C2               	bsf	194,1,c	;volatile
  3139   0000AC                     
  3140                           ;main.c: 299:         if (cntTas > 0)
  3141   0000AC  5037               	movf	_cntTas^0,w,c
  3142   0000AE  B4D8               	btfsc	status,2,c
  3143   0000B0  EF5C  F000         	goto	i1u150_21
  3144   0000B4  EF5E  F000         	goto	i1u150_20
  3145   0000B8                     i1u150_21:
  3146   0000B8  EF5F  F000         	goto	i1l2077
  3147   0000BC                     i1u150_20:
  3148   0000BC                     
  3149                           ;main.c: 300:             cntTas--;
  3150   0000BC  0637               	decf	_cntTas^0,f,c
  3151   0000BE                     i1l2077:
  3152                           
  3153                           ;main.c: 302:         if ((PORTBbits.RB0 == 1) && (cntTas == 0) && (write_event == 0) &&
      +                           (read_event == 0)) {
  3154   0000BE  A081               	btfss	129,0,c	;volatile
  3155   0000C0  EF64  F000         	goto	i1u151_21
  3156   0000C4  EF66  F000         	goto	i1u151_20
  3157   0000C8                     i1u151_21:
  3158   0000C8  EF9F  F000         	goto	i1l2093
  3159   0000CC                     i1u151_20:
  3160   0000CC  5037               	movf	_cntTas^0,w,c
  3161   0000CE  A4D8               	btfss	status,2,c
  3162   0000D0  EF6C  F000         	goto	i1u152_21
  3163   0000D4  EF6E  F000         	goto	i1u152_20
  3164   0000D8                     i1u152_21:
  3165   0000D8  EF9F  F000         	goto	i1l2093
  3166   0000DC                     i1u152_20:
  3167   0000DC  5038               	movf	_write_event^0,w,c
  3168   0000DE  A4D8               	btfss	status,2,c
  3169   0000E0  EF74  F000         	goto	i1u153_21
  3170   0000E4  EF76  F000         	goto	i1u153_20
  3171   0000E8                     i1u153_21:
  3172   0000E8  EF9F  F000         	goto	i1l2093
  3173   0000EC                     i1u153_20:
  3174   0000EC  5039               	movf	_read_event^0,w,c
  3175   0000EE  A4D8               	btfss	status,2,c
  3176   0000F0  EF7C  F000         	goto	i1u154_21
  3177   0000F4  EF7E  F000         	goto	i1u154_20
  3178   0000F8                     i1u154_21:
  3179   0000F8  EF9F  F000         	goto	i1l2093
  3180   0000FC                     i1u154_20:
  3181   0000FC                     
  3182                           ;main.c: 303:             mode_event = 1 - mode_event;
  3183   0000FC  503A               	movf	_mode_event^0,w,c
  3184   0000FE  0801               	sublw	1
  3185   000100  6E3A               	movwf	_mode_event^0,c
  3186   000102                     
  3187                           ;main.c: 305:             if (mode_event == 0)
  3188   000102  503A               	movf	_mode_event^0,w,c
  3189   000104  A4D8               	btfss	status,2,c
  3190   000106  EF87  F000         	goto	i1u155_21
  3191   00010A  EF89  F000         	goto	i1u155_20
  3192   00010E                     i1u155_21:
  3193   00010E  EF8C  F000         	goto	i1l161
  3194   000112                     i1u155_20:
  3195   000112                     
  3196                           ;main.c: 306:                 PORTBbits.RB4 = 1;
  3197   000112  8881               	bsf	129,4,c	;volatile
  3198   000114  EF9D  F000         	goto	i1l162
  3199   000118                     i1l161:
  3200                           
  3201                           ;main.c: 308:                 PORTBbits.RB4 = 0;
  3202   000118  9881               	bcf	129,4,c	;volatile
  3203   00011A                     
  3204                           ;main.c: 309:                 ADC_count = 0;
  3205   00011A  0E00               	movlw	0
  3206   00011C  6E32               	movwf	(_ADC_count+1)^0,c
  3207   00011E  0E00               	movlw	0
  3208   000120  6E31               	movwf	_ADC_count^0,c
  3209                           
  3210                           ;main.c: 310:                 Buffer_sel = 0;
  3211   000122  0E00               	movlw	0
  3212   000124  6E2A               	movwf	(_Buffer_sel+1)^0,c
  3213   000126  0E00               	movlw	0
  3214   000128  6E29               	movwf	_Buffer_sel^0,c
  3215                           
  3216                           ;main.c: 311:                 Buffer_count2 = 0;
  3217   00012A  0E00               	movlw	0
  3218   00012C  6E2C               	movwf	(_Buffer_count2+1)^0,c
  3219   00012E  0E00               	movlw	0
  3220   000130  6E2B               	movwf	_Buffer_count2^0,c
  3221                           
  3222                           ;main.c: 312:                 Buffer_count = 0;
  3223   000132  0E00               	movlw	0
  3224   000134  6E2E               	movwf	(_Buffer_count+1)^0,c
  3225   000136  0E00               	movlw	0
  3226   000138  6E2D               	movwf	_Buffer_count^0,c
  3227   00013A                     i1l162:
  3228                           
  3229                           ;main.c: 314:             cntTas = 100;
  3230   00013A  0E64               	movlw	100
  3231   00013C  6E37               	movwf	_cntTas^0,c
  3232   00013E                     i1l2093:
  3233                           
  3234                           ;main.c: 317:         if ((PORTBbits.RB1 == 1) && (cntTas == 0) && (mode_event == 1) && 
      +                          (write_event == 0) && (read_event == 0)) {
  3235   00013E  A281               	btfss	129,1,c	;volatile
  3236   000140  EFA4  F000         	goto	i1u156_21
  3237   000144  EFA6  F000         	goto	i1u156_20
  3238   000148                     i1u156_21:
  3239   000148  EFCB  F000         	goto	i1l2107
  3240   00014C                     i1u156_20:
  3241   00014C  5037               	movf	_cntTas^0,w,c
  3242   00014E  A4D8               	btfss	status,2,c
  3243   000150  EFAC  F000         	goto	i1u157_21
  3244   000154  EFAE  F000         	goto	i1u157_20
  3245   000158                     i1u157_21:
  3246   000158  EFCB  F000         	goto	i1l2107
  3247   00015C                     i1u157_20:
  3248   00015C  043A               	decf	_mode_event^0,w,c
  3249   00015E  A4D8               	btfss	status,2,c
  3250   000160  EFB4  F000         	goto	i1u158_21
  3251   000164  EFB6  F000         	goto	i1u158_20
  3252   000168                     i1u158_21:
  3253   000168  EFCB  F000         	goto	i1l2107
  3254   00016C                     i1u158_20:
  3255   00016C  5038               	movf	_write_event^0,w,c
  3256   00016E  A4D8               	btfss	status,2,c
  3257   000170  EFBC  F000         	goto	i1u159_21
  3258   000174  EFBE  F000         	goto	i1u159_20
  3259   000178                     i1u159_21:
  3260   000178  EFCB  F000         	goto	i1l2107
  3261   00017C                     i1u159_20:
  3262   00017C  5039               	movf	_read_event^0,w,c
  3263   00017E  A4D8               	btfss	status,2,c
  3264   000180  EFC4  F000         	goto	i1u160_21
  3265   000184  EFC6  F000         	goto	i1u160_20
  3266   000188                     i1u160_21:
  3267   000188  EFCB  F000         	goto	i1l2107
  3268   00018C                     i1u160_20:
  3269   00018C                     
  3270                           ;main.c: 318:             read_event = 1;
  3271   00018C  0E01               	movlw	1
  3272   00018E  6E39               	movwf	_read_event^0,c
  3273   000190                     
  3274                           ;main.c: 319:             PORTBbits.RB5 = 0;
  3275   000190  9A81               	bcf	129,5,c	;volatile
  3276                           
  3277                           ;main.c: 320:             cntTas = 100;
  3278   000192  0E64               	movlw	100
  3279   000194  6E37               	movwf	_cntTas^0,c
  3280   000196                     i1l2107:
  3281                           
  3282                           ;main.c: 323:         if ((PORTBbits.RB2 == 1) && (cntTas == 0) && (mode_event == 1) && 
      +                          (write_event == 0) && (read_event == 0)) {
  3283   000196  A481               	btfss	129,2,c	;volatile
  3284   000198  EFD0  F000         	goto	i1u161_21
  3285   00019C  EFD2  F000         	goto	i1u161_20
  3286   0001A0                     i1u161_21:
  3287   0001A0  EF07  F001         	goto	i1l164
  3288   0001A4                     i1u161_20:
  3289   0001A4  5037               	movf	_cntTas^0,w,c
  3290   0001A6  A4D8               	btfss	status,2,c
  3291   0001A8  EFD8  F000         	goto	i1u162_21
  3292   0001AC  EFDA  F000         	goto	i1u162_20
  3293   0001B0                     i1u162_21:
  3294   0001B0  EF07  F001         	goto	i1l164
  3295   0001B4                     i1u162_20:
  3296   0001B4  043A               	decf	_mode_event^0,w,c
  3297   0001B6  A4D8               	btfss	status,2,c
  3298   0001B8  EFE0  F000         	goto	i1u163_21
  3299   0001BC  EFE2  F000         	goto	i1u163_20
  3300   0001C0                     i1u163_21:
  3301   0001C0  EF07  F001         	goto	i1l164
  3302   0001C4                     i1u163_20:
  3303   0001C4  5038               	movf	_write_event^0,w,c
  3304   0001C6  A4D8               	btfss	status,2,c
  3305   0001C8  EFE8  F000         	goto	i1u164_21
  3306   0001CC  EFEA  F000         	goto	i1u164_20
  3307   0001D0                     i1u164_21:
  3308   0001D0  EF07  F001         	goto	i1l164
  3309   0001D4                     i1u164_20:
  3310   0001D4  5039               	movf	_read_event^0,w,c
  3311   0001D6  A4D8               	btfss	status,2,c
  3312   0001D8  EFF0  F000         	goto	i1u165_21
  3313   0001DC  EFF2  F000         	goto	i1u165_20
  3314   0001E0                     i1u165_21:
  3315   0001E0  EF07  F001         	goto	i1l164
  3316   0001E4                     i1u165_20:
  3317   0001E4                     
  3318                           ;main.c: 324:             write_event = 1;
  3319   0001E4  0E01               	movlw	1
  3320   0001E6  6E38               	movwf	_write_event^0,c
  3321   0001E8                     
  3322                           ;main.c: 325:             PORTBbits.RB6 = 0;
  3323   0001E8  9C81               	bcf	129,6,c	;volatile
  3324                           
  3325                           ;main.c: 326:             ADC_count = 0;
  3326   0001EA  0E00               	movlw	0
  3327   0001EC  6E32               	movwf	(_ADC_count+1)^0,c
  3328   0001EE  0E00               	movlw	0
  3329   0001F0  6E31               	movwf	_ADC_count^0,c
  3330                           
  3331                           ;main.c: 327:             Buffer_sel = 0;
  3332   0001F2  0E00               	movlw	0
  3333   0001F4  6E2A               	movwf	(_Buffer_sel+1)^0,c
  3334   0001F6  0E00               	movlw	0
  3335   0001F8  6E29               	movwf	_Buffer_sel^0,c
  3336                           
  3337                           ;main.c: 328:             Buffer_count2 = 0;
  3338   0001FA  0E00               	movlw	0
  3339   0001FC  6E2C               	movwf	(_Buffer_count2+1)^0,c
  3340   0001FE  0E00               	movlw	0
  3341   000200  6E2B               	movwf	_Buffer_count2^0,c
  3342                           
  3343                           ;main.c: 329:             Buffer_count = 0;
  3344   000202  0E00               	movlw	0
  3345   000204  6E2E               	movwf	(_Buffer_count+1)^0,c
  3346   000206  0E00               	movlw	0
  3347   000208  6E2D               	movwf	_Buffer_count^0,c
  3348                           
  3349                           ;main.c: 330:             cntTas = 100;
  3350   00020A  0E64               	movlw	100
  3351   00020C  6E37               	movwf	_cntTas^0,c
  3352   00020E                     i1l164:
  3353                           
  3354                           ;main.c: 333:         TMR0H = 0xFC;
  3355   00020E  0EFC               	movlw	252
  3356   000210  6ED7               	movwf	215,c	;volatile
  3357                           
  3358                           ;main.c: 334:         TMR0L = 0xF3;
  3359   000212  0EF3               	movlw	243
  3360   000214  6ED6               	movwf	214,c	;volatile
  3361   000216                     i1l165:
  3362   000216  C04C  FFF4         	movff	??_ISR+8,prodh
  3363   00021A  C04B  FFF3         	movff	??_ISR+7,prodl
  3364   00021E  C04A  FFDA         	movff	??_ISR+6,fsr2h
  3365   000222  C049  FFD9         	movff	??_ISR+5,fsr2l
  3366   000226  C048  FFE0         	movff	??_ISR+4,bsr
  3367   00022A  C047  FFE8         	movff	??_ISR+3,wreg
  3368   00022E  C046  FFD8         	movff	??_ISR+2,status
  3369   000232  906A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3370   000234  0010               	retfie	
  3371   000236                     __end_of_ISR:
  3372                           	callstack 0
  3373                           
  3374 ;; *************** function _writeBuffer *****************
  3375 ;; Defined at:
  3376 ;;		line 238 in file "main.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  Result          2    3[COMRAM] unsigned int 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;		None
  3381 ;; Return value:  Size  Location     Type
  3382 ;;                  1    wreg      void 
  3383 ;; Registers used:
  3384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3385 ;; Tracked objects:
  3386 ;;		On entry : 0/0
  3387 ;;		On exit  : 0/0
  3388 ;;		Unchanged: 0/0
  3389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3390 ;;      Params:         2       0       0       0       0       0       0
  3391 ;;      Locals:         0       0       0       0       0       0       0
  3392 ;;      Temps:          4       0       0       0       0       0       0
  3393 ;;      Totals:         6       0       0       0       0       0       0
  3394 ;;Total ram usage:        6 bytes
  3395 ;; Hardware stack levels used: 1
  3396 ;; Hardware stack levels required when called: 1
  3397 ;; This function calls:
  3398 ;;		_pack_samples
  3399 ;; This function is called by:
  3400 ;;		_ISR
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text17
  3405   000A40                     __ptext17:
  3406                           	callstack 0
  3407   000A40                     _writeBuffer:
  3408                           	callstack 22
  3409   000A40                     
  3410                           ;main.c: 239:     ADC_sample[ADC_count] = Result;
  3411   000A40  5031               	movf	_ADC_count^0,w,c
  3412   000A42  0D02               	mullw	2
  3413   000A44  50F3               	movf	243,w,c
  3414   000A46  0F15               	addlw	low _ADC_sample
  3415   000A48  6ED9               	movwf	fsr2l,c
  3416   000A4A  6ADA               	clrf	fsr2h,c
  3417   000A4C  C03E  FFDE         	movff	writeBuffer@Result,postinc2
  3418   000A50  C03F  FFDD         	movff	writeBuffer@Result+1,postdec2
  3419   000A54                     
  3420                           ;main.c: 241:     if (ADC_count == 2)
  3421   000A54  0E02               	movlw	2
  3422   000A56  1831               	xorwf	_ADC_count^0,w,c
  3423   000A58  1032               	iorwf	(_ADC_count+1)^0,w,c
  3424   000A5A  A4D8               	btfss	status,2,c
  3425   000A5C  EF32  F005         	goto	i1u128_21
  3426   000A60  EF34  F005         	goto	i1u128_20
  3427   000A64                     i1u128_21:
  3428   000A64  EF3A  F005         	goto	i1l1917
  3429   000A68                     i1u128_20:
  3430   000A68                     
  3431                           ;main.c: 242:         ADC_count = 0;
  3432   000A68  0E00               	movlw	0
  3433   000A6A  6E32               	movwf	(_ADC_count+1)^0,c
  3434   000A6C  0E00               	movlw	0
  3435   000A6E  6E31               	movwf	_ADC_count^0,c
  3436   000A70  EF3C  F005         	goto	i1l1919
  3437   000A74                     i1l1917:
  3438                           
  3439                           ;main.c: 244:         ADC_count++;
  3440   000A74  4A31               	infsnz	_ADC_count^0,f,c
  3441   000A76  2A32               	incf	(_ADC_count+1)^0,f,c
  3442   000A78                     i1l1919:
  3443                           
  3444                           ;main.c: 246:     if (ADC_count == 0) {
  3445   000A78  5031               	movf	_ADC_count^0,w,c
  3446   000A7A  1032               	iorwf	(_ADC_count+1)^0,w,c
  3447   000A7C  A4D8               	btfss	status,2,c
  3448   000A7E  EF43  F005         	goto	i1u129_21
  3449   000A82  EF45  F005         	goto	i1u129_20
  3450   000A86                     i1u129_21:
  3451   000A86  EFE9  F005         	goto	i1l149
  3452   000A8A                     i1u129_20:
  3453   000A8A                     
  3454                           ;main.c: 247:         pack_samples();
  3455   000A8A  ECD5  F007         	call	_pack_samples	;wreg free
  3456   000A8E                     
  3457                           ;main.c: 249:         if (Buffer_sel == 1)
  3458   000A8E  0429               	decf	_Buffer_sel^0,w,c
  3459   000A90  102A               	iorwf	(_Buffer_sel+1)^0,w,c
  3460   000A92  A4D8               	btfss	status,2,c
  3461   000A94  EF4E  F005         	goto	i1u130_21
  3462   000A98  EF50  F005         	goto	i1u130_20
  3463   000A9C                     i1u130_21:
  3464   000A9C  EF56  F005         	goto	i1l1927
  3465   000AA0                     i1u130_20:
  3466   000AA0                     
  3467                           ;main.c: 250:             Buffer = Buffer2;
  3468   000AA0  0E88               	movlw	low _Buffer2
  3469   000AA2  6E2F               	movwf	_Buffer^0,c
  3470   000AA4  0E00               	movlw	high _Buffer2
  3471   000AA6  6E30               	movwf	(_Buffer+1)^0,c
  3472   000AA8  EF5A  F005         	goto	i1l1929
  3473   000AAC                     i1l1927:
  3474                           
  3475                           ;main.c: 252:             Buffer = Buffer1;
  3476   000AAC  0E88               	movlw	low _Buffer1
  3477   000AAE  6E2F               	movwf	_Buffer^0,c
  3478   000AB0  0E02               	movlw	high _Buffer1
  3479   000AB2  6E30               	movwf	(_Buffer+1)^0,c
  3480   000AB4                     i1l1929:
  3481                           
  3482                           ;main.c: 254:         Buffer[(Buffer_count << 2) + 0] = ByteX[0];
  3483   000AB4  90D8               	bcf	status,0,c
  3484   000AB6  342D               	rlcf	_Buffer_count^0,w,c
  3485   000AB8  6ED9               	movwf	fsr2l,c
  3486   000ABA  342E               	rlcf	(_Buffer_count+1)^0,w,c
  3487   000ABC  6EDA               	movwf	fsr2h,c
  3488   000ABE  90D8               	bcf	status,0,c
  3489   000AC0  36D9               	rlcf	fsr2l,f,c
  3490   000AC2  36DA               	rlcf	fsr2h,f,c
  3491   000AC4  502F               	movf	_Buffer^0,w,c
  3492   000AC6  26D9               	addwf	fsr2l,f,c
  3493   000AC8  5030               	movf	(_Buffer+1)^0,w,c
  3494   000ACA  22DA               	addwfc	fsr2h,f,c
  3495   000ACC  C023  FFDF         	movff	_ByteX,indf2
  3496   000AD0                     
  3497                           ;main.c: 255:         Buffer[(Buffer_count << 2) + 1] = ByteX[1];
  3498   000AD0  C02D  F040         	movff	_Buffer_count,??_writeBuffer
  3499   000AD4  C02E  F041         	movff	_Buffer_count+1,??_writeBuffer+1
  3500   000AD8  90D8               	bcf	status,0,c
  3501   000ADA  3640               	rlcf	??_writeBuffer^0,f,c
  3502   000ADC  3641               	rlcf	(??_writeBuffer+1)^0,f,c
  3503   000ADE  90D8               	bcf	status,0,c
  3504   000AE0  3640               	rlcf	??_writeBuffer^0,f,c
  3505   000AE2  3641               	rlcf	(??_writeBuffer+1)^0,f,c
  3506   000AE4  5040               	movf	??_writeBuffer^0,w,c
  3507   000AE6  242F               	addwf	_Buffer^0,w,c
  3508   000AE8  6E42               	movwf	(??_writeBuffer+2)^0,c
  3509   000AEA  5041               	movf	(??_writeBuffer+1)^0,w,c
  3510   000AEC  2030               	addwfc	(_Buffer+1)^0,w,c
  3511   000AEE  6E43               	movwf	(??_writeBuffer+3)^0,c
  3512   000AF0  0E01               	movlw	1
  3513   000AF2  2442               	addwf	(??_writeBuffer+2)^0,w,c
  3514   000AF4  6ED9               	movwf	fsr2l,c
  3515   000AF6  0E00               	movlw	0
  3516   000AF8  2043               	addwfc	(??_writeBuffer+3)^0,w,c
  3517   000AFA  6EDA               	movwf	fsr2h,c
  3518   000AFC  C024  FFDF         	movff	_ByteX+1,indf2
  3519   000B00                     
  3520                           ;main.c: 256:         Buffer[(Buffer_count << 2) + 2] = ByteX[2];
  3521   000B00  C02D  F040         	movff	_Buffer_count,??_writeBuffer
  3522   000B04  C02E  F041         	movff	_Buffer_count+1,??_writeBuffer+1
  3523   000B08  90D8               	bcf	status,0,c
  3524   000B0A  3640               	rlcf	??_writeBuffer^0,f,c
  3525   000B0C  3641               	rlcf	(??_writeBuffer+1)^0,f,c
  3526   000B0E  90D8               	bcf	status,0,c
  3527   000B10  3640               	rlcf	??_writeBuffer^0,f,c
  3528   000B12  3641               	rlcf	(??_writeBuffer+1)^0,f,c
  3529   000B14  5040               	movf	??_writeBuffer^0,w,c
  3530   000B16  242F               	addwf	_Buffer^0,w,c
  3531   000B18  6E42               	movwf	(??_writeBuffer+2)^0,c
  3532   000B1A  5041               	movf	(??_writeBuffer+1)^0,w,c
  3533   000B1C  2030               	addwfc	(_Buffer+1)^0,w,c
  3534   000B1E  6E43               	movwf	(??_writeBuffer+3)^0,c
  3535   000B20  0E02               	movlw	2
  3536   000B22  2442               	addwf	(??_writeBuffer+2)^0,w,c
  3537   000B24  6ED9               	movwf	fsr2l,c
  3538   000B26  0E00               	movlw	0
  3539   000B28  2043               	addwfc	(??_writeBuffer+3)^0,w,c
  3540   000B2A  6EDA               	movwf	fsr2h,c
  3541   000B2C  C025  FFDF         	movff	_ByteX+2,indf2
  3542   000B30                     
  3543                           ;main.c: 257:         Buffer[(Buffer_count << 2) + 3] = ByteX[3];
  3544   000B30  C02D  F040         	movff	_Buffer_count,??_writeBuffer
  3545   000B34  C02E  F041         	movff	_Buffer_count+1,??_writeBuffer+1
  3546   000B38  90D8               	bcf	status,0,c
  3547   000B3A  3640               	rlcf	??_writeBuffer^0,f,c
  3548   000B3C  3641               	rlcf	(??_writeBuffer+1)^0,f,c
  3549   000B3E  90D8               	bcf	status,0,c
  3550   000B40  3640               	rlcf	??_writeBuffer^0,f,c
  3551   000B42  3641               	rlcf	(??_writeBuffer+1)^0,f,c
  3552   000B44  5040               	movf	??_writeBuffer^0,w,c
  3553   000B46  242F               	addwf	_Buffer^0,w,c
  3554   000B48  6E42               	movwf	(??_writeBuffer+2)^0,c
  3555   000B4A  5041               	movf	(??_writeBuffer+1)^0,w,c
  3556   000B4C  2030               	addwfc	(_Buffer+1)^0,w,c
  3557   000B4E  6E43               	movwf	(??_writeBuffer+3)^0,c
  3558   000B50  0E03               	movlw	3
  3559   000B52  2442               	addwf	(??_writeBuffer+2)^0,w,c
  3560   000B54  6ED9               	movwf	fsr2l,c
  3561   000B56  0E00               	movlw	0
  3562   000B58  2043               	addwfc	(??_writeBuffer+3)^0,w,c
  3563   000B5A  6EDA               	movwf	fsr2h,c
  3564   000B5C  C026  FFDF         	movff	_ByteX+3,indf2
  3565                           
  3566                           ;main.c: 259:         if (Buffer_count < 127) {
  3567   000B60  502E               	movf	(_Buffer_count+1)^0,w,c
  3568   000B62  E107               	bnz	i1u131_21
  3569   000B64  0E7F               	movlw	127
  3570   000B66  5C2D               	subwf	_Buffer_count^0,w,c
  3571   000B68  B0D8               	btfsc	status,0,c
  3572   000B6A  EFB9  F005         	goto	i1u131_21
  3573   000B6E  EFBB  F005         	goto	i1u131_20
  3574   000B72                     i1u131_21:
  3575   000B72  EFBF  F005         	goto	i1l1939
  3576   000B76                     i1u131_20:
  3577   000B76                     
  3578                           ;main.c: 260:             Buffer_count++;
  3579   000B76  4A2D               	infsnz	_Buffer_count^0,f,c
  3580   000B78  2A2E               	incf	(_Buffer_count+1)^0,f,c
  3581                           
  3582                           ;main.c: 261:         } else {
  3583   000B7A  EFE9  F005         	goto	i1l149
  3584   000B7E                     i1l1939:
  3585                           
  3586                           ;main.c: 262:             Buffer_count = 0;
  3587   000B7E  0E00               	movlw	0
  3588   000B80  6E2E               	movwf	(_Buffer_count+1)^0,c
  3589   000B82  0E00               	movlw	0
  3590   000B84  6E2D               	movwf	_Buffer_count^0,c
  3591   000B86                     
  3592                           ;main.c: 264:             Buffer_sel = 1 - Buffer_sel;
  3593   000B86  5029               	movf	_Buffer_sel^0,w,c
  3594   000B88  0801               	sublw	1
  3595   000B8A  6E29               	movwf	_Buffer_sel^0,c
  3596   000B8C  502A               	movf	(_Buffer_sel+1)^0,w,c
  3597   000B8E  A0D8               	btfss	status,0,c
  3598   000B90  2AE8               	incf	wreg,f,c
  3599   000B92  0800               	sublw	0
  3600   000B94  6E2A               	movwf	(_Buffer_sel+1)^0,c
  3601   000B96                     
  3602                           ;main.c: 266:             if (Buffer_sel == 1)
  3603   000B96  0429               	decf	_Buffer_sel^0,w,c
  3604   000B98  102A               	iorwf	(_Buffer_sel+1)^0,w,c
  3605   000B9A  A4D8               	btfss	status,2,c
  3606   000B9C  EFD2  F005         	goto	i1u132_21
  3607   000BA0  EFD4  F005         	goto	i1u132_20
  3608   000BA4                     i1u132_21:
  3609   000BA4  EFD7  F005         	goto	i1l146
  3610   000BA8                     i1u132_20:
  3611   000BA8                     
  3612                           ;main.c: 267:                 PORTBbits.RB6 = 1;
  3613   000BA8  8C81               	bsf	129,6,c	;volatile
  3614   000BAA  EFD8  F005         	goto	i1l1947
  3615   000BAE                     i1l146:
  3616                           
  3617                           ;main.c: 269:                 PORTBbits.RB6 = 0;
  3618   000BAE  9C81               	bcf	129,6,c	;volatile
  3619   000BB0                     i1l1947:
  3620                           
  3621                           ;main.c: 271:             Buffer_count2++;
  3622   000BB0  4A2B               	infsnz	_Buffer_count2^0,f,c
  3623   000BB2  2A2C               	incf	(_Buffer_count2+1)^0,f,c
  3624   000BB4                     
  3625                           ;main.c: 273:             if (Buffer_count2 >= 10) {
  3626   000BB4  502C               	movf	(_Buffer_count2+1)^0,w,c
  3627   000BB6  E109               	bnz	i1u133_20
  3628   000BB8  0E0A               	movlw	10
  3629   000BBA  5C2B               	subwf	_Buffer_count2^0,w,c
  3630   000BBC  A0D8               	btfss	status,0,c
  3631   000BBE  EFE3  F005         	goto	i1u133_21
  3632   000BC2  EFE5  F005         	goto	i1u133_20
  3633   000BC6                     i1u133_21:
  3634   000BC6  EFE7  F005         	goto	i1l1953
  3635   000BCA                     i1u133_20:
  3636   000BCA                     
  3637                           ;main.c: 274:                 write_event = 0;
  3638   000BCA  6A38               	clrf	_write_event^0,c
  3639                           
  3640                           ;main.c: 275:                 PORTBbits.RB6 = 1;
  3641   000BCC  8C81               	bsf	129,6,c	;volatile
  3642   000BCE                     i1l1953:
  3643                           
  3644                           ;main.c: 277:             FlagUSD = 1;
  3645   000BCE  0E01               	movlw	1
  3646   000BD0  6E36               	movwf	_FlagUSD^0,c
  3647   000BD2                     i1l149:
  3648   000BD2  0012               	return		;funcret
  3649   000BD4                     __end_of_writeBuffer:
  3650                           	callstack 0
  3651                           
  3652 ;; *************** function _pack_samples *****************
  3653 ;; Defined at:
  3654 ;;		line 225 in file "main.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;		None
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;		None
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      void 
  3661 ;; Registers used:
  3662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3668 ;;      Params:         0       0       0       0       0       0       0
  3669 ;;      Locals:         0       0       0       0       0       0       0
  3670 ;;      Temps:          3       0       0       0       0       0       0
  3671 ;;      Totals:         3       0       0       0       0       0       0
  3672 ;;Total ram usage:        3 bytes
  3673 ;; Hardware stack levels used: 1
  3674 ;; This function calls:
  3675 ;;		Nothing
  3676 ;; This function is called by:
  3677 ;;		_writeBuffer
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           	psect	text18
  3682   000FAA                     __ptext18:
  3683                           	callstack 0
  3684   000FAA                     _pack_samples:
  3685                           	callstack 22
  3686   000FAA                     
  3687                           ;main.c: 226:     ByteX[0] = (unsigned char) (ADC_sample[0] >> 2);
  3688   000FAA  C015  F03B         	movff	_ADC_sample,??_pack_samples
  3689   000FAE  C016  F03C         	movff	_ADC_sample+1,??_pack_samples+1
  3690   000FB2  343C               	rlcf	(??_pack_samples+1)^0,w,c
  3691   000FB4  323C               	rrcf	(??_pack_samples+1)^0,f,c
  3692   000FB6  323B               	rrcf	??_pack_samples^0,f,c
  3693   000FB8  343C               	rlcf	(??_pack_samples+1)^0,w,c
  3694   000FBA  323C               	rrcf	(??_pack_samples+1)^0,f,c
  3695   000FBC  323B               	rrcf	??_pack_samples^0,f,c
  3696   000FBE  503B               	movf	??_pack_samples^0,w,c
  3697   000FC0  6E23               	movwf	_ByteX^0,c
  3698   000FC2                     
  3699                           ;main.c: 227:     ByteX[1] = (unsigned char) (((ADC_sample[0] & 0x0003) << 6) + (ADC_sam
      +                          ple[1] >> 4));
  3700   000FC2  EE20  F017         	lfsr	2,_ADC_sample+2
  3701   000FC6  CFDE F03B          	movff	postinc2,??_pack_samples
  3702   000FCA  CFDD F03C          	movff	postdec2,??_pack_samples+1
  3703   000FCE  0E04               	movlw	4
  3704   000FD0  6E3D               	movwf	(??_pack_samples+2)^0,c
  3705   000FD2                     i1u26_25:
  3706   000FD2  343C               	rlcf	(??_pack_samples+1)^0,w,c
  3707   000FD4  323C               	rrcf	(??_pack_samples+1)^0,f,c
  3708   000FD6  323B               	rrcf	??_pack_samples^0,f,c
  3709   000FD8  2E3D               	decfsz	(??_pack_samples+2)^0,f,c
  3710   000FDA  EFE9  F007         	goto	i1u26_25
  3711   000FDE  5015               	movf	_ADC_sample^0,w,c
  3712   000FE0  0B03               	andlw	3
  3713   000FE2  0D40               	mullw	64
  3714   000FE4  50F3               	movf	243,w,c
  3715   000FE6  243B               	addwf	??_pack_samples^0,w,c
  3716   000FE8  6E24               	movwf	(_ByteX+1)^0,c
  3717   000FEA                     
  3718                           ;main.c: 228:     ByteX[2] = (unsigned char) (((ADC_sample[1] & 0x000F) << 4) + (ADC_sam
      +                          ple[2] >> 6));
  3719   000FEA  EE20  F019         	lfsr	2,_ADC_sample+4
  3720   000FEE  CFDE F03B          	movff	postinc2,??_pack_samples
  3721   000FF2  CFDD F03C          	movff	postdec2,??_pack_samples+1
  3722   000FF6  0E06               	movlw	6
  3723   000FF8  6E3D               	movwf	(??_pack_samples+2)^0,c
  3724   000FFA                     i1u27_25:
  3725   000FFA  343C               	rlcf	(??_pack_samples+1)^0,w,c
  3726   000FFC  323C               	rrcf	(??_pack_samples+1)^0,f,c
  3727   000FFE  323B               	rrcf	??_pack_samples^0,f,c
  3728   001000  2E3D               	decfsz	(??_pack_samples+2)^0,f,c
  3729   001002  EFFD  F007         	goto	i1u27_25
  3730   001006  5017               	movf	(_ADC_sample+2)^0,w,c
  3731   001008  0B0F               	andlw	15
  3732   00100A  0D10               	mullw	16
  3733   00100C  50F3               	movf	243,w,c
  3734   00100E  243B               	addwf	??_pack_samples^0,w,c
  3735   001010  6E25               	movwf	(_ByteX+2)^0,c
  3736                           
  3737                           ;main.c: 229:     ByteX[3] = (unsigned char) ((ADC_sample[2] & 0x003F) << 2);
  3738   001012  C019  F03B         	movff	_ADC_sample+4,??_pack_samples
  3739   001016  0E3F               	movlw	63
  3740   001018  163B               	andwf	??_pack_samples^0,f,c
  3741   00101A  90D8               	bcf	status,0,c
  3742   00101C  363B               	rlcf	??_pack_samples^0,f,c
  3743   00101E  90D8               	bcf	status,0,c
  3744   001020  343B               	rlcf	??_pack_samples^0,w,c
  3745   001022  6E26               	movwf	(_ByteX+3)^0,c
  3746   001024  0012               	return		;funcret
  3747   001026                     __end_of_pack_samples:
  3748                           	callstack 0
  3749                           
  3750                           	psect	smallconst
  3751   000600                     __psmallconst:
  3752                           	callstack 0
  3753   000600  00                 	db	0
  3754   000601  00                 	db	0	; dummy byte at the end
  3755   000000                     __activetblptr  equ	0
  3756                           
  3757                           	psect	rparam
  3758   000001                     ___rparam_used  equ	1
  3759   000000                     ___param_bank   equ	0
  3760   000000                     __Lparam        equ	__Lrparam
  3761   000000                     __Hparam        equ	__Hrparam
  3762                           
  3763                           	psect	temp
  3764   00006A                     btemp:
  3765                           	callstack 0
  3766   00006A                     	ds	1
  3767   00006A                     int$flags       set	btemp
  3768   00006B                     wtemp8          set	btemp+1
  3769   00006B                     ttemp5          set	btemp+1
  3770   00006E                     ttemp6          set	btemp+4
  3771   000072                     ttemp7          set	btemp+8
  3772                           
  3773                           	psect	idloc
  3774                           
  3775                           ;Config register IDLOC0 @ 0x200000
  3776                           ;	unspecified, using default values
  3777   200000                     	org	2097152
  3778   200000  FF                 	db	255
  3779                           
  3780                           ;Config register IDLOC1 @ 0x200001
  3781                           ;	unspecified, using default values
  3782   200001                     	org	2097153
  3783   200001  FF                 	db	255
  3784                           
  3785                           ;Config register IDLOC2 @ 0x200002
  3786                           ;	unspecified, using default values
  3787   200002                     	org	2097154
  3788   200002  FF                 	db	255
  3789                           
  3790                           ;Config register IDLOC3 @ 0x200003
  3791                           ;	unspecified, using default values
  3792   200003                     	org	2097155
  3793   200003  FF                 	db	255
  3794                           
  3795                           ;Config register IDLOC4 @ 0x200004
  3796                           ;	unspecified, using default values
  3797   200004                     	org	2097156
  3798   200004  FF                 	db	255
  3799                           
  3800                           ;Config register IDLOC5 @ 0x200005
  3801                           ;	unspecified, using default values
  3802   200005                     	org	2097157
  3803   200005  FF                 	db	255
  3804                           
  3805                           ;Config register IDLOC6 @ 0x200006
  3806                           ;	unspecified, using default values
  3807   200006                     	org	2097158
  3808   200006  FF                 	db	255
  3809                           
  3810                           ;Config register IDLOC7 @ 0x200007
  3811                           ;	unspecified, using default values
  3812   200007                     	org	2097159
  3813   200007  FF                 	db	255
  3814                           
  3815                           	psect	config
  3816                           
  3817                           ; Padding undefined space
  3818   300000                     	org	3145728
  3819   300000  FF                 	db	255
  3820                           
  3821                           ;Config register CONFIG1H @ 0x300001
  3822                           ;	Oscillator Selection bits
  3823                           ;	OSC = HS, HS oscillator
  3824                           ;	Fail-Safe Clock Monitor Enable bit
  3825                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3826                           ;	Internal/External Oscillator Switchover bit
  3827                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3828   300001                     	org	3145729
  3829   300001  02                 	db	2
  3830                           
  3831                           ;Config register CONFIG2L @ 0x300002
  3832                           ;	Power-up Timer Enable bit
  3833                           ;	PWRT = OFF, PWRT disabled
  3834                           ;	Brown-out Reset Enable bits
  3835                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3836                           ;	Brown Out Reset Voltage bits
  3837                           ;	BORV = 3, Minimum setting
  3838   300002                     	org	3145730
  3839   300002  19                 	db	25
  3840                           
  3841                           ;Config register CONFIG2H @ 0x300003
  3842                           ;	Watchdog Timer Enable bit
  3843                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3844                           ;	Watchdog Timer Postscale Select bits
  3845                           ;	WDTPS = 32768, 1:32768
  3846   300003                     	org	3145731
  3847   300003  1E                 	db	30
  3848                           
  3849                           ; Padding undefined space
  3850   300004                     	org	3145732
  3851   300004  FF                 	db	255
  3852                           
  3853                           ;Config register CONFIG3H @ 0x300005
  3854                           ;	CCP2 MUX bit
  3855                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3856                           ;	PORTB A/D Enable bit
  3857                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3858                           ;	Low-Power Timer1 Oscillator Enable bit
  3859                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3860                           ;	MCLR Pin Enable bit
  3861                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  3862   300005                     	org	3145733
  3863   300005  01                 	db	1
  3864                           
  3865                           ;Config register CONFIG4L @ 0x300006
  3866                           ;	Stack Full/Underflow Reset Enable bit
  3867                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  3868                           ;	Single-Supply ICSP Enable bit
  3869                           ;	LVP = OFF, Single-Supply ICSP disabled
  3870                           ;	Extended Instruction Set Enable bit
  3871                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3872                           ;	Background Debugger Enable bit
  3873                           ;	DEBUG = 0x1, unprogrammed default
  3874   300006                     	org	3145734
  3875   300006  80                 	db	128
  3876                           
  3877                           ; Padding undefined space
  3878   300007                     	org	3145735
  3879   300007  FF                 	db	255
  3880                           
  3881                           ;Config register CONFIG5L @ 0x300008
  3882                           ;	Code Protection bit
  3883                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3884                           ;	Code Protection bit
  3885                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3886                           ;	Code Protection bit
  3887                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3888                           ;	Code Protection bit
  3889                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3890   300008                     	org	3145736
  3891   300008  0F                 	db	15
  3892                           
  3893                           ;Config register CONFIG5H @ 0x300009
  3894                           ;	Boot Block Code Protection bit
  3895                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3896                           ;	Data EEPROM Code Protection bit
  3897                           ;	CPD = OFF, Data EEPROM not code-protected
  3898   300009                     	org	3145737
  3899   300009  C0                 	db	192
  3900                           
  3901                           ;Config register CONFIG6L @ 0x30000A
  3902                           ;	Write Protection bit
  3903                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3904                           ;	Write Protection bit
  3905                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3906                           ;	Write Protection bit
  3907                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3908                           ;	Write Protection bit
  3909                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3910   30000A                     	org	3145738
  3911   30000A  0F                 	db	15
  3912                           
  3913                           ;Config register CONFIG6H @ 0x30000B
  3914                           ;	Configuration Register Write Protection bit
  3915                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3916                           ;	Boot Block Write Protection bit
  3917                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  3918                           ;	Data EEPROM Write Protection bit
  3919                           ;	WRTD = OFF, Data EEPROM not write-protected
  3920   30000B                     	org	3145739
  3921   30000B  E0                 	db	224
  3922                           
  3923                           ;Config register CONFIG7L @ 0x30000C
  3924                           ;	Table Read Protection bit
  3925                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  3926                           ;	Table Read Protection bit
  3927                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  3928                           ;	Table Read Protection bit
  3929                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  3930                           ;	Table Read Protection bit
  3931                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3932   30000C                     	org	3145740
  3933   30000C  0F                 	db	15
  3934                           
  3935                           ;Config register CONFIG7H @ 0x30000D
  3936                           ;	Boot Block Table Read Protection bit
  3937                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3938   30000D                     	org	3145741
  3939   30000D  40                 	db	64
  3940                           tosu	equ	0xFFF
  3941                           tosh	equ	0xFFE
  3942                           tosl	equ	0xFFD
  3943                           stkptr	equ	0xFFC
  3944                           pclatu	equ	0xFFB
  3945                           pclath	equ	0xFFA
  3946                           pcl	equ	0xFF9
  3947                           tblptru	equ	0xFF8
  3948                           tblptrh	equ	0xFF7
  3949                           tblptrl	equ	0xFF6
  3950                           tablat	equ	0xFF5
  3951                           prodh	equ	0xFF4
  3952                           prodl	equ	0xFF3
  3953                           indf0	equ	0xFEF
  3954                           postinc0	equ	0xFEE
  3955                           postdec0	equ	0xFED
  3956                           preinc0	equ	0xFEC
  3957                           plusw0	equ	0xFEB
  3958                           fsr0h	equ	0xFEA
  3959                           fsr0l	equ	0xFE9
  3960                           wreg	equ	0xFE8
  3961                           indf1	equ	0xFE7
  3962                           postinc1	equ	0xFE6
  3963                           postdec1	equ	0xFE5
  3964                           preinc1	equ	0xFE4
  3965                           plusw1	equ	0xFE3
  3966                           fsr1h	equ	0xFE2
  3967                           fsr1l	equ	0xFE1
  3968                           bsr	equ	0xFE0
  3969                           indf2	equ	0xFDF
  3970                           postinc2	equ	0xFDE
  3971                           postdec2	equ	0xFDD
  3972                           preinc2	equ	0xFDC
  3973                           plusw2	equ	0xFDB
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1082
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     47     105
    BANK0           128      8       8
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    Buffer	PTR unsigned char  size(2) Largest target is 512
		 -> Buffer1(BIGRAM[512]), Buffer2(BIGRAM[512]), NULL(NULL[0]), 

    SD_readSingleBlock@Buffer1	PTR unsigned char  size(2) Largest target is 512
		 -> Buffer1(BIGRAM[512]), 

    SD_writeSingleBlock@Buffer1	PTR unsigned char  size(2) Largest target is 512
		 -> Buffer1(BIGRAM[512]), Buffer2(BIGRAM[512]), 


Critical Paths under _main in COMRAM

    _main->_init
    _init->_init_SDMMC
    _init_SDMMC->_SD_init
    _SD_init->_SD_sendCommand
    _SD_writeSingleBlock->_SD_sendCommand
    _SD_readSingleBlock->_SD_sendCommand
    _SD_sendCommand->_SPI1_Read
    _SD_sendCommand->_SPI1_Write

Critical Paths under _ISR in COMRAM

    _ISR->_writeBuffer
    _writeBuffer->_pack_samples

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    4193
                                             43 COMRAM     4     4      0
                                              0 BANK0      8     8      0
                 _SD_readSingleBlock
                _SD_writeSingleBlock
                               _init
                     _init_variables
                               _pack
                           _transmit
                     _unpack_samples
 ---------------------------------------------------------------------------------
 (1) _unpack_samples                                       4     4      0       0
                                             18 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _transmit                                             2     2      0      69
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _pack                                                 6     4      2     173
                                             18 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _init_variables                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0    1469
                                             41 COMRAM     2     2      0
                          _UART_Init
                         _init_SDMMC
 ---------------------------------------------------------------------------------
 (2) _init_SDMMC                                           5     3      2    1432
                                             36 COMRAM     5     3      2
                            _SD_init
                          _SPI1_Init
 ---------------------------------------------------------------------------------
 (3) _SPI1_Init                                            4     1      3     158
                                             18 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (3) _SD_init                                              5     5      0    1237
                                             31 COMRAM     5     5      0
                     _SD_sendCommand
                         _SPI1_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SD_writeSingleBlock                                 11     5      6    1195
                                             31 COMRAM    11     5      6
                     _SD_sendCommand
                          _SPI1_Read
                         _SPI1_Write
 ---------------------------------------------------------------------------------
 (1) _SD_readSingleBlock                                  11     5      6    1089
                                             31 COMRAM    11     5      6
                     _SD_sendCommand
                          _SPI1_Read
 ---------------------------------------------------------------------------------
 (4) _SD_sendCommand                                      12     8      4     814
                                             19 COMRAM    12     8      4
                          _SPI1_Read
                         _SPI1_Write
 ---------------------------------------------------------------------------------
 (4) _SPI1_Write                                           2     2      0      31
                                             18 COMRAM     1     1      0
                   _SPI1_ReceiveWait
 ---------------------------------------------------------------------------------
 (5) _SPI1_Read                                            2     2      0      30
                                             18 COMRAM     1     1      0
                   _SPI1_ReceiveWait
 ---------------------------------------------------------------------------------
 (5) _SPI1_ReceiveWait                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  9     9      0      23
                                              9 COMRAM     9     9      0
                        _writeBuffer
 ---------------------------------------------------------------------------------
 (8) _writeBuffer                                          6     4      2      23
                                              3 COMRAM     6     4      2
                       _pack_samples
 ---------------------------------------------------------------------------------
 (9) _pack_samples                                         3     3      0       0
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SD_readSingleBlock
     _SD_sendCommand
       _SPI1_Read
         _SPI1_ReceiveWait
       _SPI1_Write
         _SPI1_ReceiveWait
     _SPI1_Read
   _SD_writeSingleBlock
     _SD_sendCommand
     _SPI1_Read
     _SPI1_Write
   _init
     _UART_Init
     _init_SDMMC
       _SD_init
         _SD_sendCommand
         _SPI1_Write
       _SPI1_Init
   _init_variables
   _pack
   _transmit
   _unpack_samples

 _ISR (ROOT)
   _writeBuffer
     _pack_samples

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1535      0    1024     66.7%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           128      0       0      0.0%
BANK0              128      8       8      6.2%
BITCOMRAM          126      0       0      0.0%
COMRAM             126     47     105     83.3%
BITBIGSFRh          82      0       0      0.0%
BITBIGSFRlh         43      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0    1137      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sat Jan 25 10:17:06 2025

                  _SSPSTATbits 0FC7                             bsr 0FE0                    _totalBlocks 001B  
                          l110 119E                            l113 11E4                            l122 1086  
                          l130 1132                            l107 116C                            l117 10E6  
                          l206 0A3E                            l127 1104                            l232 0D4A  
                          l136 0FA8                            l233 0D36                            l330 11F4  
                          l170 061C                            l235 0D54                            l180 087E  
                          l333 11F6                            l229 0CCE                            l245 0F18  
                          l255 0E62                            l336 1204                            l344 1220  
                          l176 0848                            l347 1212                            _ISR 0018  
                          wreg 0FE8               ??_init_variables 004D                    main@address 0080  
                         ?_ISR 003B                 SPI1_Init@sType 0050                           l2411 0D1C  
                         l2403 0CD8                           l2413 0D2E                           l2405 0CF0  
                         l2501 0A0A                           l2351 120C                           l2415 0D38  
                         l2407 0D00                           l2503 0A10                           l2511 0A3C  
                         l2423 11E8                           l2345 11F6                           l2361 121E  
                         l2353 1210                           l2417 0D50                           l2409 0D12  
                         l2601 0D8A                           l2505 0A20                           l2441 08AE  
                         l2433 0894                           l2425 088A                           l2521 1152  
                         l2355 1216                           l2347 1208                           l2419 0D52  
                         l2371 0BFA                           l2611 0D9A                           l2603 0D8C  
                         l2531 11D2                           l2507 0A30                           l2451 08E4  
                         l2443 08C6                           l2435 089A                           l2427 0892  
                         l2523 1164                           l2515 1134                           l2357 1216  
                         l2349 1208                           l2373 0C0C                           l2381 0C54  
                         l2365 0BD6                           l2621 0DD6                           l2613 0DAC  
                         l2605 0D92                           l2541 11DC                           l2533 11D4  
                         l2509 0A38                           l2461 090A                           l2453 08F4  
                         l2445 08CA                           l2437 089C                           l2517 1134  
                         l2701 0640                           l2359 121A                           l2391 0C9C  
                         l2375 0C1E                           l2383 0C86                           l2367 0BD8  
                         l2623 0DEA                           l2615 0DB0                           l2543 11DE  
                         l2535 11D6                           l2527 11CA                           l2471 094A  
                         l2463 090E                           l2455 08F6                           l2447 08DE  
                         l2439 08AC                           l2519 1146                           l2551 109A  
                         l2711 06B2                           l2703 066A                           l2393 0CA2  
                         l2385 0C88                           l2377 0C30                           l2369 0BE8  
                         l2641 0E2E                           l2633 0E0A                           l2617 0DC2  
                         l2537 11D8                           l2529 11CE                           l2481 0994  
                         l2473 095A                           l2465 0926                           l2457 08FC  
                         l2553 10C0                           l2545 116E                           l2561 1026  
                         l2721 070C                           l2713 06C2                           l2705 0690  
                         l2395 0CA8                           l2387 0C90                           l2379 0C42  
                         l2635 0E20                           l2627 0DF0                           l2619 0DCE  
                         l2539 11DA                           l2491 09C6                           l2483 09A8  
                         l2475 0962                           l2467 092A                           l2459 0902  
                         l2555 10C4                           l2547 1088                           l2571 103C  
                         l2731 07DE                           l2715 06CA                           l2707 06A0  
                         l2397 0CBA                           l2389 0C96                           l2661 0E90  
                         l2653 0E64                           l2637 0E22                           l2493 09C8  
                         l2477 0978                           l2469 093E                           l2557 10C6  
                         l2549 108C                           l2573 1058                           l2741 0812  
                         l2733 07E2                           l2725 0726                           l2717 06E8  
                         l2709 06A2                           l2399 0CC4                           l2671 0EBA  
                         l2663 0E92                           l2655 0E64                           l2647 0E48  
                         l2639 0E28                           l2495 09DA                           l2487 09AE  
                         l2479 0990                           l2559 10E4                           l2575 105C  
                         l2567 102E                           l2591 0F1A                           l2743 081E  
                         l2735 07F2                           l2727 07CE                           l2751 083A  
                         l2719 0704                           l2681 0EEC                           l2673 0ED0  
                         l2665 0E9E                           l2657 0E7C                           l2593 0D56  
                         l2497 09F2                           l2489 09BE                           l2577 1074  
                         l2569 1038                           l2585 10F8                           l2745 0822  
                         l2737 07FE                           l2729 07D2                           l2683 0EF0  
                         l2667 0EB4                           l2595 0D5E                           l2499 09F6  
                         l2587 1112                           l2579 10E8                           l2747 0832  
                         l2739 0802                           l2691 0602                           l2685 0F02  
                         l2597 0D76                           l2589 1116                           l2693 0614  
                         l2679 0ED8                           l2695 0618                           l2697 062C  
                         l2699 062E                           u2000 0C1E                           u2001 0C1A  
                         u2010 0C30                           u2011 0C2C                           u2020 0C42  
                         u2100 08AC                           u2021 0C3E                           u2101 08A8  
                         u2030 0C54                           u2110 08DE                           u2031 0C50  
                         u2111 08DA                           u2200 0A30                           u2120 08F4  
                         u2201 0A2C                           u2121 08F0                           u2050 0CBA  
                         u2130 093E                           u2210 10E4                           u2051 0CB6  
                         u2131 093A                           u2211 10E0                           u2060 0CF0  
                         u2300 0E06                           u2140 095A                           u2220 1058  
                         u2061 0CEC                           u2045 0C66                           u2301 0E02  
                         u2141 0956                           u2221 1054                           u2070 0D00  
                         u2310 0E20                           u2150 09A8                           u2230 1112  
                         u2071 0CFC                           u2311 0E1C                           u2151 09A4  
                         u2231 110E                           u2080 0D12                           u2320 0E44  
                         u2160 09BE                           u2240 1132                           u2400 06A0  
                         u2081 0D0E                           u2321 0E40                           u2161 09BA  
                         u2241 112E                           u2401 069C                           u2090 0D2E  
                         u2330 0E5E                           u2170 09DA                           u2410 06C2  
                         u2091 0D2A                           u2331 0E5A                           u2171 09D6  
                         u2411 06BE                           u2340 0E8C                           u2180 0A0A  
                         u2420 0722                           u2341 0E88                           u2181 0A06  
                         u2421 071E                           u2350 0EB4                           u2270 0D86  
                         u2190 0A20                           u2430 087E                           u2351 0EB0  
                         u2271 0D82                           u2191 0A1C                           u2255 0F22  
                         u2431 087A                           u2360 0ED0                           u2280 0DC2  
                         u2361 0ECC                           u2281 0DBE                           u2265 0F90  
                         u2370 0F02                           u2290 0DEA                           u2371 0EFE  
                         u2291 0DE6                           u2380 062C                           u2381 0628  
                         u2390 0640                           u2391 063C                           _PIE1 0F9D  
                         u2707 0828                           u1960 1204                           u1961 1200  
                         u1970 0BE8                           u1971 0BE4                           u1980 0BFA  
                         u1981 0BF6                           u1990 0C0C                           u1991 0C08  
                         u2687 07E8                           u2697 0808     __end_of_SD_readSingleBlock 0F1A  
     SD_writeSingleBlock@retry 0060                           _main 0602                           _pack 1026  
                         _init 1088                           fsr1h 0FE2                           fsr2h 0FDA  
                         indf2 0FDF                           fsr1l 0FE1                           fsr2l 0FD9  
                         btemp 006A                __end_of_SD_init 0A40                           prodh 0FF4  
                         prodl 0FF3                           start 0236               _SPI1_ReceiveWait 11F6  
                 ___param_bank 0000                          ??_ISR 0044                    _writeBuffer 0A40  
                        ?_main 003B                          ?_pack 004D                          ?_init 003B  
                        _T0CON 0FD5                          i1l133 1024                          i1l161 0118  
                        i1l146 0BAE                          i1l162 013A                          i1l164 020E  
                        i1l149 0BD2                          i1l165 0216                    ?_SPI1_Write 003B  
                        _RCSTA 0FAB                          _TMR0H 0FD7                          _TMR0L 0FD6  
                        _SPBRG 0FAF                          _PORTA 0F80                          _PORTB 0F81  
                        _PORTC 0F82                          _TRISA 0F92                          _TRISB 0F93  
                        _TRISC 0F94                          _TXREG 0FAD                     _Buffer_sel 0029  
                        _ByteX 0023                    _write_event 0038  SD_writeSingleBlock@startBlock 005A  
                        pack@i 0051                          ttemp5 006B                          ttemp6 006E  
                        ttemp7 0072                          status 0FD8                  ?_pack_samples 003B  
                        wtemp8 006B                __initialization 11A0                   __end_of_main 088A  
                 __end_of_pack 1088                   __end_of_init 10E8                         ??_main 0066  
                       ??_pack 004F                         ??_init 0064                  __activetblptr 0000  
                       _ADCON0 0FC2                         _ADCON1 0FC1                         _ADCON2 0FC0  
            writeBuffer@Result 003E                         _ADRESH 0FC4                         _ADRESL 0FC3  
                    ??_SD_init 005A                 _unpack_samples 0F1A                         i1l2101 017C  
                       i1l1223 0FAA                         i1l2111 01B4                         i1l2103 018C  
                       i1l1225 0FC2                         i1l2113 01C4                         i1l2105 0190  
                       i1l1227 0FEA                         i1l2115 01D4                         i1l2107 0196  
                       i1l2117 01E4                         i1l2109 01A4                         i1l2061 0066  
                       i1l2053 0036                         i1l2119 01E8                         i1l2071 00A8  
                       i1l2063 0076                         i1l2055 0044                         i1l2081 00DC  
                       i1l2073 00AC                         i1l2065 007E                         i1l2057 0052  
                       i1l2091 011A                         i1l2083 00EC                         i1l2075 00BC  
                       i1l2067 008E                         i1l2059 0054                         i1l2085 00FC  
                       i1l2093 013E                         i1l2077 00BE                         i1l2069 009A  
                       i1l2095 014C                         i1l2087 0102                         i1l2079 00CC  
                       i1l2097 015C                         i1l2089 0112                         i1l2099 016C  
                       i1l1911 0A40                         i1l1921 0A8A                         i1l1913 0A54  
                       i1l1931 0AD0                         i1l1923 0A8E                         i1l1915 0A68  
                       i1l1941 0B86                         i1l1933 0B00                         i1l1925 0AA0  
                       i1l1917 0A74                         i1l1951 0BCA                         i1l1943 0B96  
                       i1l1935 0B30                         i1l1927 0AAC                         i1l1919 0A78  
                       i1l1953 0BCE                         i1l1945 0BA8                         i1l1937 0B76  
                       i1l1929 0AB4                         i1l1947 0BB0                         i1l1939 0B7E  
                       i1l1949 0BB4                         _INTCON 0FF2                 ??_pack_samples 003B  
                       _SPBRGH 0FB0                         _SSPBUF 0FC9                         _Buffer 002F  
            __end_of_SPI1_Init 11F6              __end_of_SPI1_Read 1222                         _Result 0027  
            __end_of_UART_Init 11E6                         _cntTas 0037                         clear_0 11A8  
                       clear_1 11BA                         isa$std 0001                   __mediumconst 0000  
       SD_sendCommand@response 0058         __end_of_unpack_samples 0FAA               __end_of_transmit 1134  
          SPI1_Init@sClockIdle 004E                     __accesstop 0080        __end_of__initialization 11C0  
                ___rparam_used 0001                 __pcstackCOMRAM 003B                   _FlagTransmit 0035  
     __end_of_SPI1_ReceiveWait 1206                ?_unpack_samples 003B            _SD_writeSingleBlock 0D56  
                 SD_init@retry 005D     SD_writeSingleBlock@Buffer1 005E             _SD_readSingleBlock 0E64  
         ?_SD_writeSingleBlock 005A                   ?_writeBuffer 003E           __end_of_pack_samples 1026  
                 ??_SPI1_Write 004D            ?_SD_readSingleBlock 005A                        _INTCON2 0FF1  
                      i1u26_25 0FD2                        i1u27_25 0FFA                        _SSPCON1 0FC6  
  SD_writeSingleBlock@response 0062                        _SSPSTAT 0FC7     SD_readSingleBlock@response 0062  
                      _SD_init 088A                        _FlagUSD 0036                   _Buffer_count 002D  
                      _Buffer1 0288                        _Buffer2 0088           ??_SD_readSingleBlock 0060  
                      __Hparam 0000                        __Lparam 0000                     _init_SDMMC 1134  
           __end_of_SPI1_Write 1214                      _ADC_count 0031            SD_sendCommand@retry 0056  
        ??_SD_writeSingleBlock 0060                      ?_transmit 003B                   __psmallconst 0600  
                      __pcinit 11A0                        __ramtop 0600                     _read_event 0039  
                      __ptext0 0602                        __ptext1 0F1A                        __ptext2 10E8  
                      __ptext3 1026                        __ptext4 116E                        __ptext5 1088  
                      __ptext6 1134                        __ptext7 11E6                        __ptext8 088A  
                      __ptext9 11CA                     _mode_event 003A           end_of_initialization 11C0  
                      init@ret 0064           SPI1_Init@sDataSample 004D                 _SD_sendCommand 0BD4  
                    _SDHC_flag 0034                        postdec1 0FE5                        postdec2 0FDD  
               main@startBlock 0084                        postinc0 0FEE                        postinc2 0FDE  
                    _SPI1_Init 11E6                      _SPI1_Read 1214                     ??_transmit 004D  
                    _UART_Init 11CA                      _PORTBbits 0F81                      _TRISCbits 0F94  
                   _startBlock 001F         __end_of_SD_sendCommand 0D56                      _TXSTAbits 0FAC  
      SD_readSingleBlock@retry 0060                     pack@Sample 004D                    ?_init_SDMMC 005F  
                   ?_SPI1_Init 004D                     ?_SPI1_Read 003B                    _BAUDCONbits 0FB8  
                   ?_UART_Init 003B               ??_unpack_samples 004D            start_initialization 11A0  
                  __end_of_ISR 0236              ?_SPI1_ReceiveWait 003B                SD_init@response 005C  
           ??_SPI1_ReceiveWait 004D                ?_SD_sendCommand 004E                   _pack_samples 0FAA  
                SPI1_Write@dat 004D         SPI1_Init@sTransmitEdge 004F              SD_sendCommand@cmd 0059  
            SD_sendCommand@arg 004E                    _ADC_sample2 000F          SD_sendCommand@status1 0057  
                  __pbssBIGRAM 0088                    __pbssCOMRAM 0001                  __pcstackBANK0 0080  
    SD_readSingleBlock@Buffer1 005E                       ?_SD_init 003B                  init_SDMMC@ret 0062  
               _init_variables 116E            SD_readSingleBlock@i 0063                      _data_pack 0001  
                  ??_SPI1_Init 0050                    ??_SPI1_Read 004D                    __pintcodelo 0018  
                  ??_UART_Init 004D                     SPI1_Read@d 004D                    __smallconst 0600  
                     SD_init@i 005B   SD_readSingleBlock@startBlock 005A         __end_of_init_variables 11A0  
                     _PIE1bits 0F9D    __end_of_SD_writeSingleBlock 0E64                       i1u130_20 0AA0  
                     i1u130_21 0A9C                       i1u131_20 0B76                       i1u131_21 0B72  
                     i1u132_20 0BA8                       i1u132_21 0BA4                       i1u133_20 0BCA  
                     i1u133_21 0BC6                       i1u150_20 00BC                       i1u150_21 00B8  
                     i1u151_20 00CC                       i1u151_21 00C8                       i1u128_20 0A68  
                     i1u160_20 018C                       i1u152_20 00DC                       i1u128_21 0A64  
                     i1u160_21 0188                       i1u152_21 00D8                       i1u129_20 0A8A  
                     i1u161_20 01A4                       i1u153_20 00EC                       i1u145_20 0044  
                     i1u129_21 0A86                       i1u161_21 01A0                       i1u153_21 00E8  
                     i1u145_21 0040                       i1u162_20 01B4                       i1u154_20 00FC  
                     i1u146_20 0052                       i1u162_21 01B0                       i1u154_21 00F8  
                     i1u146_21 004E                       i1u163_20 01C4                       i1u155_20 0112  
                     i1u147_20 0076                       i1u163_21 01C0                       i1u155_21 010E  
                     i1u147_21 0072                       i1u164_20 01D4                       i1u156_20 014C  
                     i1u148_20 008E                       i1u164_21 01D0                       i1u156_21 0148  
                     i1u148_21 008A                       i1u165_20 01E4                       i1u157_20 015C  
                     i1u149_20 00A8                       i1u165_21 01E0                       i1u157_21 0158  
                     i1u149_21 00A4                       i1u158_20 016C                       i1u158_21 0168  
                     i1u159_20 017C                       i1u159_21 0178                       _PIR1bits 0F9E  
                   _ADCON0bits 0FC2                  _Buffer_count2 002B                ?_init_variables 003B  
                     __Hrparam 0000                   ??_init_SDMMC 0061                       __Lrparam 0000  
                   _ADC_sample 0015           SD_writeSingleBlock@i 0063                       _cardType 0033  
             ??_SD_sendCommand 0052                       __ptext10 0D56                       __ptext11 0E64  
                     __ptext12 0BD4                       __ptext13 1206                       __ptext14 1214  
                     __ptext15 11F6                       __ptext17 0A40                       __ptext18 0FAA  
           __end_of_init_SDMMC 116E              SD_init@SD_version 005A                       isa$xinst 0000  
                     int$flags 006A                       _transmit 10E8                  ??_writeBuffer 0040  
                   _INTCONbits 0FF2                      transmit@i 004D                       intlevel1 0000  
                   _SPI1_Write 1206            __end_of_writeBuffer 0BD4  
